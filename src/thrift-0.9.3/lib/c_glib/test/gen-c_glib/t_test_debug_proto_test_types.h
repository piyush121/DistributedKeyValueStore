/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef T_TEST_DEBUG_PROTO_TEST_TYPES_H
#define T_TEST_DEBUG_PROTO_TEST_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>

/* custom thrift includes */

/* begin types */

enum _TTestSomeEnum {
  T_TEST_SOME_ENUM_ONE = 1,
  T_TEST_SOME_ENUM_TWO = 2
};
typedef enum _TTestSomeEnum TTestSomeEnum;

/* return the name of the constant */
const char *
toString_SomeEnum(int value); 

typedef GHashTable TTestSomeMap;

/* struct Doubles */
struct _TTestDoubles
{ 
  ThriftStruct parent; 

  /* public */
  gdouble nan;
  gboolean __isset_nan;
  gdouble inf;
  gboolean __isset_inf;
  gdouble neginf;
  gboolean __isset_neginf;
  gdouble repeating;
  gboolean __isset_repeating;
  gdouble big;
  gboolean __isset_big;
  gdouble tiny;
  gboolean __isset_tiny;
  gdouble zero;
  gboolean __isset_zero;
  gdouble negzero;
  gboolean __isset_negzero;
};
typedef struct _TTestDoubles TTestDoubles;

struct _TTestDoublesClass
{
  ThriftStructClass parent;
};
typedef struct _TTestDoublesClass TTestDoublesClass;

GType t_test_doubles_get_type (void);
#define T_TEST_TYPE_DOUBLES (t_test_doubles_get_type())
#define T_TEST_DOUBLES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_DOUBLES, TTestDoubles))
#define T_TEST_DOUBLES_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_DOUBLES, TTestDoublesClass))
#define T_TEST_IS_DOUBLES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_DOUBLES))
#define T_TEST_IS_DOUBLES_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_DOUBLES))
#define T_TEST_DOUBLES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_DOUBLES, TTestDoublesClass))

/* struct OneOfEach */
struct _TTestOneOfEach
{ 
  ThriftStruct parent; 

  /* public */
  gboolean im_true;
  gboolean __isset_im_true;
  gboolean im_false;
  gboolean __isset_im_false;
  gint8 a_bite;
  gboolean __isset_a_bite;
  gint16 integer16;
  gboolean __isset_integer16;
  gint32 integer32;
  gboolean __isset_integer32;
  gint64 integer64;
  gboolean __isset_integer64;
  gdouble double_precision;
  gboolean __isset_double_precision;
  gchar * some_characters;
  gboolean __isset_some_characters;
  gchar * zomg_unicode;
  gboolean __isset_zomg_unicode;
  gboolean what_who;
  gboolean __isset_what_who;
  GByteArray * base64;
  gboolean __isset_base64;
  GArray * byte_list;
  gboolean __isset_byte_list;
  GArray * i16_list;
  gboolean __isset_i16_list;
  GArray * i64_list;
  gboolean __isset_i64_list;
};
typedef struct _TTestOneOfEach TTestOneOfEach;

struct _TTestOneOfEachClass
{
  ThriftStructClass parent;
};
typedef struct _TTestOneOfEachClass TTestOneOfEachClass;

GType t_test_one_of_each_get_type (void);
#define T_TEST_TYPE_ONE_OF_EACH (t_test_one_of_each_get_type())
#define T_TEST_ONE_OF_EACH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_ONE_OF_EACH, TTestOneOfEach))
#define T_TEST_ONE_OF_EACH_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_ONE_OF_EACH, TTestOneOfEachClass))
#define T_TEST_IS_ONE_OF_EACH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_ONE_OF_EACH))
#define T_TEST_IS_ONE_OF_EACH_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_ONE_OF_EACH))
#define T_TEST_ONE_OF_EACH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_ONE_OF_EACH, TTestOneOfEachClass))

/* struct Bonk */
struct _TTestBonk
{ 
  ThriftStruct parent; 

  /* public */
  gint32 type;
  gboolean __isset_type;
  gchar * message;
  gboolean __isset_message;
};
typedef struct _TTestBonk TTestBonk;

struct _TTestBonkClass
{
  ThriftStructClass parent;
};
typedef struct _TTestBonkClass TTestBonkClass;

GType t_test_bonk_get_type (void);
#define T_TEST_TYPE_BONK (t_test_bonk_get_type())
#define T_TEST_BONK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_BONK, TTestBonk))
#define T_TEST_BONK_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_BONK, TTestBonkClass))
#define T_TEST_IS_BONK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_BONK))
#define T_TEST_IS_BONK_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_BONK))
#define T_TEST_BONK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_BONK, TTestBonkClass))

/* struct Nesting */
struct _TTestNesting
{ 
  ThriftStruct parent; 

  /* public */
  TTestBonk * my_bonk;
  gboolean __isset_my_bonk;
  TTestOneOfEach * my_ooe;
  gboolean __isset_my_ooe;
};
typedef struct _TTestNesting TTestNesting;

struct _TTestNestingClass
{
  ThriftStructClass parent;
};
typedef struct _TTestNestingClass TTestNestingClass;

GType t_test_nesting_get_type (void);
#define T_TEST_TYPE_NESTING (t_test_nesting_get_type())
#define T_TEST_NESTING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_NESTING, TTestNesting))
#define T_TEST_NESTING_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_NESTING, TTestNestingClass))
#define T_TEST_IS_NESTING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_NESTING))
#define T_TEST_IS_NESTING_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_NESTING))
#define T_TEST_NESTING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_NESTING, TTestNestingClass))

/* struct HolyMoley */
struct _TTestHolyMoley
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * big;
  gboolean __isset_big;
  GHashTable * contain;
  gboolean __isset_contain;
  GHashTable * bonks;
  gboolean __isset_bonks;
};
typedef struct _TTestHolyMoley TTestHolyMoley;

struct _TTestHolyMoleyClass
{
  ThriftStructClass parent;
};
typedef struct _TTestHolyMoleyClass TTestHolyMoleyClass;

GType t_test_holy_moley_get_type (void);
#define T_TEST_TYPE_HOLY_MOLEY (t_test_holy_moley_get_type())
#define T_TEST_HOLY_MOLEY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_HOLY_MOLEY, TTestHolyMoley))
#define T_TEST_HOLY_MOLEY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_HOLY_MOLEY, TTestHolyMoleyClass))
#define T_TEST_IS_HOLY_MOLEY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_HOLY_MOLEY))
#define T_TEST_IS_HOLY_MOLEY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_HOLY_MOLEY))
#define T_TEST_HOLY_MOLEY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_HOLY_MOLEY, TTestHolyMoleyClass))

/* struct Backwards */
struct _TTestBackwards
{ 
  ThriftStruct parent; 

  /* public */
  gint32 first_tag2;
  gboolean __isset_first_tag2;
  gint32 second_tag1;
  gboolean __isset_second_tag1;
};
typedef struct _TTestBackwards TTestBackwards;

struct _TTestBackwardsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestBackwardsClass TTestBackwardsClass;

GType t_test_backwards_get_type (void);
#define T_TEST_TYPE_BACKWARDS (t_test_backwards_get_type())
#define T_TEST_BACKWARDS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_BACKWARDS, TTestBackwards))
#define T_TEST_BACKWARDS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_BACKWARDS, TTestBackwardsClass))
#define T_TEST_IS_BACKWARDS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_BACKWARDS))
#define T_TEST_IS_BACKWARDS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_BACKWARDS))
#define T_TEST_BACKWARDS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_BACKWARDS, TTestBackwardsClass))

/* struct Empty */
struct _TTestEmpty
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestEmpty TTestEmpty;

struct _TTestEmptyClass
{
  ThriftStructClass parent;
};
typedef struct _TTestEmptyClass TTestEmptyClass;

GType t_test_empty_get_type (void);
#define T_TEST_TYPE_EMPTY (t_test_empty_get_type())
#define T_TEST_EMPTY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_EMPTY, TTestEmpty))
#define T_TEST_EMPTY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_EMPTY, TTestEmptyClass))
#define T_TEST_IS_EMPTY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_EMPTY))
#define T_TEST_IS_EMPTY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_EMPTY))
#define T_TEST_EMPTY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_EMPTY, TTestEmptyClass))

/* struct Wrapper */
struct _TTestWrapper
{ 
  ThriftStruct parent; 

  /* public */
  TTestEmpty * foo;
  gboolean __isset_foo;
};
typedef struct _TTestWrapper TTestWrapper;

struct _TTestWrapperClass
{
  ThriftStructClass parent;
};
typedef struct _TTestWrapperClass TTestWrapperClass;

GType t_test_wrapper_get_type (void);
#define T_TEST_TYPE_WRAPPER (t_test_wrapper_get_type())
#define T_TEST_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_WRAPPER, TTestWrapper))
#define T_TEST_WRAPPER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_WRAPPER, TTestWrapperClass))
#define T_TEST_IS_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_WRAPPER))
#define T_TEST_IS_WRAPPER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_WRAPPER))
#define T_TEST_WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_WRAPPER, TTestWrapperClass))

/* struct RandomStuff */
struct _TTestRandomStuff
{ 
  ThriftStruct parent; 

  /* public */
  gint32 a;
  gboolean __isset_a;
  gint32 b;
  gboolean __isset_b;
  gint32 c;
  gboolean __isset_c;
  gint32 d;
  gboolean __isset_d;
  GArray * myintlist;
  gboolean __isset_myintlist;
  GHashTable * maps;
  gboolean __isset_maps;
  gint64 bigint;
  gboolean __isset_bigint;
  gdouble triple;
  gboolean __isset_triple;
};
typedef struct _TTestRandomStuff TTestRandomStuff;

struct _TTestRandomStuffClass
{
  ThriftStructClass parent;
};
typedef struct _TTestRandomStuffClass TTestRandomStuffClass;

GType t_test_random_stuff_get_type (void);
#define T_TEST_TYPE_RANDOM_STUFF (t_test_random_stuff_get_type())
#define T_TEST_RANDOM_STUFF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_RANDOM_STUFF, TTestRandomStuff))
#define T_TEST_RANDOM_STUFF_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_RANDOM_STUFF, TTestRandomStuffClass))
#define T_TEST_IS_RANDOM_STUFF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_RANDOM_STUFF))
#define T_TEST_IS_RANDOM_STUFF_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_RANDOM_STUFF))
#define T_TEST_RANDOM_STUFF_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_RANDOM_STUFF, TTestRandomStuffClass))

/* struct Base64 */
struct _TTestBase64
{ 
  ThriftStruct parent; 

  /* public */
  gint32 a;
  gboolean __isset_a;
  GByteArray * b1;
  gboolean __isset_b1;
  GByteArray * b2;
  gboolean __isset_b2;
  GByteArray * b3;
  gboolean __isset_b3;
  GByteArray * b4;
  gboolean __isset_b4;
  GByteArray * b5;
  gboolean __isset_b5;
  GByteArray * b6;
  gboolean __isset_b6;
};
typedef struct _TTestBase64 TTestBase64;

struct _TTestBase64Class
{
  ThriftStructClass parent;
};
typedef struct _TTestBase64Class TTestBase64Class;

GType t_test_base64_get_type (void);
#define T_TEST_TYPE_BASE64 (t_test_base64_get_type())
#define T_TEST_BASE64(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_BASE64, TTestBase64))
#define T_TEST_BASE64_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_BASE64, TTestBase64Class))
#define T_TEST_IS_BASE64(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_BASE64))
#define T_TEST_IS_BASE64_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_BASE64))
#define T_TEST_BASE64_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_BASE64, TTestBase64Class))

/* struct CompactProtoTestStruct */
struct _TTestCompactProtoTestStruct
{ 
  ThriftStruct parent; 

  /* public */
  gint8 a_byte;
  gboolean __isset_a_byte;
  gint16 a_i16;
  gboolean __isset_a_i16;
  gint32 a_i32;
  gboolean __isset_a_i32;
  gint64 a_i64;
  gboolean __isset_a_i64;
  gdouble a_double;
  gboolean __isset_a_double;
  gchar * a_string;
  gboolean __isset_a_string;
  GByteArray * a_binary;
  gboolean __isset_a_binary;
  gboolean true_field;
  gboolean __isset_true_field;
  gboolean false_field;
  gboolean __isset_false_field;
  TTestEmpty * empty_struct_field;
  gboolean __isset_empty_struct_field;
  GArray * byte_list;
  gboolean __isset_byte_list;
  GArray * i16_list;
  gboolean __isset_i16_list;
  GArray * i32_list;
  gboolean __isset_i32_list;
  GArray * i64_list;
  gboolean __isset_i64_list;
  GArray * double_list;
  gboolean __isset_double_list;
  GPtrArray * string_list;
  gboolean __isset_string_list;
  GPtrArray * binary_list;
  gboolean __isset_binary_list;
  GArray * boolean_list;
  gboolean __isset_boolean_list;
  GPtrArray * struct_list;
  gboolean __isset_struct_list;
  GHashTable * byte_set;
  gboolean __isset_byte_set;
  GHashTable * i16_set;
  gboolean __isset_i16_set;
  GHashTable * i32_set;
  gboolean __isset_i32_set;
  GHashTable * i64_set;
  gboolean __isset_i64_set;
  GHashTable * double_set;
  gboolean __isset_double_set;
  GHashTable * string_set;
  gboolean __isset_string_set;
  GHashTable * binary_set;
  gboolean __isset_binary_set;
  GHashTable * boolean_set;
  gboolean __isset_boolean_set;
  GHashTable * struct_set;
  gboolean __isset_struct_set;
  GHashTable * byte_byte_map;
  gboolean __isset_byte_byte_map;
  GHashTable * i16_byte_map;
  gboolean __isset_i16_byte_map;
  GHashTable * i32_byte_map;
  gboolean __isset_i32_byte_map;
  GHashTable * i64_byte_map;
  gboolean __isset_i64_byte_map;
  GHashTable * double_byte_map;
  gboolean __isset_double_byte_map;
  GHashTable * string_byte_map;
  gboolean __isset_string_byte_map;
  GHashTable * binary_byte_map;
  gboolean __isset_binary_byte_map;
  GHashTable * boolean_byte_map;
  gboolean __isset_boolean_byte_map;
  GHashTable * byte_i16_map;
  gboolean __isset_byte_i16_map;
  GHashTable * byte_i32_map;
  gboolean __isset_byte_i32_map;
  GHashTable * byte_i64_map;
  gboolean __isset_byte_i64_map;
  GHashTable * byte_double_map;
  gboolean __isset_byte_double_map;
  GHashTable * byte_string_map;
  gboolean __isset_byte_string_map;
  GHashTable * byte_binary_map;
  gboolean __isset_byte_binary_map;
  GHashTable * byte_boolean_map;
  gboolean __isset_byte_boolean_map;
  GHashTable * list_byte_map;
  gboolean __isset_list_byte_map;
  GHashTable * set_byte_map;
  gboolean __isset_set_byte_map;
  GHashTable * map_byte_map;
  gboolean __isset_map_byte_map;
  GHashTable * byte_map_map;
  gboolean __isset_byte_map_map;
  GHashTable * byte_set_map;
  gboolean __isset_byte_set_map;
  GHashTable * byte_list_map;
  gboolean __isset_byte_list_map;
};
typedef struct _TTestCompactProtoTestStruct TTestCompactProtoTestStruct;

struct _TTestCompactProtoTestStructClass
{
  ThriftStructClass parent;
};
typedef struct _TTestCompactProtoTestStructClass TTestCompactProtoTestStructClass;

GType t_test_compact_proto_test_struct_get_type (void);
#define T_TEST_TYPE_COMPACT_PROTO_TEST_STRUCT (t_test_compact_proto_test_struct_get_type())
#define T_TEST_COMPACT_PROTO_TEST_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_COMPACT_PROTO_TEST_STRUCT, TTestCompactProtoTestStruct))
#define T_TEST_COMPACT_PROTO_TEST_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_COMPACT_PROTO_TEST_STRUCT, TTestCompactProtoTestStructClass))
#define T_TEST_IS_COMPACT_PROTO_TEST_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_COMPACT_PROTO_TEST_STRUCT))
#define T_TEST_IS_COMPACT_PROTO_TEST_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_COMPACT_PROTO_TEST_STRUCT))
#define T_TEST_COMPACT_PROTO_TEST_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_COMPACT_PROTO_TEST_STRUCT, TTestCompactProtoTestStructClass))

/* struct SingleMapTestStruct */
struct _TTestSingleMapTestStruct
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * i32_map;
};
typedef struct _TTestSingleMapTestStruct TTestSingleMapTestStruct;

struct _TTestSingleMapTestStructClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSingleMapTestStructClass TTestSingleMapTestStructClass;

GType t_test_single_map_test_struct_get_type (void);
#define T_TEST_TYPE_SINGLE_MAP_TEST_STRUCT (t_test_single_map_test_struct_get_type())
#define T_TEST_SINGLE_MAP_TEST_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SINGLE_MAP_TEST_STRUCT, TTestSingleMapTestStruct))
#define T_TEST_SINGLE_MAP_TEST_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SINGLE_MAP_TEST_STRUCT, TTestSingleMapTestStructClass))
#define T_TEST_IS_SINGLE_MAP_TEST_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SINGLE_MAP_TEST_STRUCT))
#define T_TEST_IS_SINGLE_MAP_TEST_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SINGLE_MAP_TEST_STRUCT))
#define T_TEST_SINGLE_MAP_TEST_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SINGLE_MAP_TEST_STRUCT, TTestSingleMapTestStructClass))

struct _TTestExceptionWithAMap
{ 
  ThriftStruct parent; 

  /* public */
  gchar * blah;
  gboolean __isset_blah;
  GHashTable * map_field;
  gboolean __isset_map_field;
};
typedef struct _TTestExceptionWithAMap TTestExceptionWithAMap;

struct _TTestExceptionWithAMapClass
{
  ThriftStructClass parent;
};
typedef struct _TTestExceptionWithAMapClass TTestExceptionWithAMapClass;

GType t_test_exception_with_a_map_get_type (void);
#define T_TEST_TYPE_EXCEPTION_WITH_A_MAP (t_test_exception_with_a_map_get_type())
#define T_TEST_EXCEPTION_WITH_A_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_EXCEPTION_WITH_A_MAP, TTestExceptionWithAMap))
#define T_TEST_EXCEPTION_WITH_A_MAP_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_EXCEPTION_WITH_A_MAP, TTestExceptionWithAMapClass))
#define T_TEST_IS_EXCEPTION_WITH_A_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_EXCEPTION_WITH_A_MAP))
#define T_TEST_IS_EXCEPTION_WITH_A_MAP_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_EXCEPTION_WITH_A_MAP))
#define T_TEST_EXCEPTION_WITH_A_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_EXCEPTION_WITH_A_MAP, TTestExceptionWithAMapClass))

/* exception */
typedef enum
{
  T_TEST_EXCEPTION_WITH_A_MAP_ERROR_CODE
} TTestExceptionWithAMapError;

GQuark t_test_exception_with_a_map_error_quark (void);
#define T_TEST_EXCEPTION_WITH_A_MAP_ERROR (t_test_exception_with_a_map_error_quark())


/* struct BlowUp */
struct _TTestBlowUp
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * b1;
  gboolean __isset_b1;
  GHashTable * b2;
  gboolean __isset_b2;
  GHashTable * b3;
  gboolean __isset_b3;
  GHashTable * b4;
  gboolean __isset_b4;
};
typedef struct _TTestBlowUp TTestBlowUp;

struct _TTestBlowUpClass
{
  ThriftStructClass parent;
};
typedef struct _TTestBlowUpClass TTestBlowUpClass;

GType t_test_blow_up_get_type (void);
#define T_TEST_TYPE_BLOW_UP (t_test_blow_up_get_type())
#define T_TEST_BLOW_UP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_BLOW_UP, TTestBlowUp))
#define T_TEST_BLOW_UP_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_BLOW_UP, TTestBlowUpClass))
#define T_TEST_IS_BLOW_UP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_BLOW_UP))
#define T_TEST_IS_BLOW_UP_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_BLOW_UP))
#define T_TEST_BLOW_UP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_BLOW_UP, TTestBlowUpClass))

/* struct ReverseOrderStruct */
struct _TTestReverseOrderStruct
{ 
  ThriftStruct parent; 

  /* public */
  gchar * first;
  gboolean __isset_first;
  gint16 second;
  gboolean __isset_second;
  gint32 third;
  gboolean __isset_third;
  gint64 fourth;
  gboolean __isset_fourth;
};
typedef struct _TTestReverseOrderStruct TTestReverseOrderStruct;

struct _TTestReverseOrderStructClass
{
  ThriftStructClass parent;
};
typedef struct _TTestReverseOrderStructClass TTestReverseOrderStructClass;

GType t_test_reverse_order_struct_get_type (void);
#define T_TEST_TYPE_REVERSE_ORDER_STRUCT (t_test_reverse_order_struct_get_type())
#define T_TEST_REVERSE_ORDER_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_REVERSE_ORDER_STRUCT, TTestReverseOrderStruct))
#define T_TEST_REVERSE_ORDER_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_REVERSE_ORDER_STRUCT, TTestReverseOrderStructClass))
#define T_TEST_IS_REVERSE_ORDER_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_REVERSE_ORDER_STRUCT))
#define T_TEST_IS_REVERSE_ORDER_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_REVERSE_ORDER_STRUCT))
#define T_TEST_REVERSE_ORDER_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_REVERSE_ORDER_STRUCT, TTestReverseOrderStructClass))

/* struct StructWithSomeEnum */
struct _TTestStructWithSomeEnum
{ 
  ThriftStruct parent; 

  /* public */
  TTestSomeEnum blah;
  gboolean __isset_blah;
};
typedef struct _TTestStructWithSomeEnum TTestStructWithSomeEnum;

struct _TTestStructWithSomeEnumClass
{
  ThriftStructClass parent;
};
typedef struct _TTestStructWithSomeEnumClass TTestStructWithSomeEnumClass;

GType t_test_struct_with_some_enum_get_type (void);
#define T_TEST_TYPE_STRUCT_WITH_SOME_ENUM (t_test_struct_with_some_enum_get_type())
#define T_TEST_STRUCT_WITH_SOME_ENUM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_STRUCT_WITH_SOME_ENUM, TTestStructWithSomeEnum))
#define T_TEST_STRUCT_WITH_SOME_ENUM_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_STRUCT_WITH_SOME_ENUM, TTestStructWithSomeEnumClass))
#define T_TEST_IS_STRUCT_WITH_SOME_ENUM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_STRUCT_WITH_SOME_ENUM))
#define T_TEST_IS_STRUCT_WITH_SOME_ENUM_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_STRUCT_WITH_SOME_ENUM))
#define T_TEST_STRUCT_WITH_SOME_ENUM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_STRUCT_WITH_SOME_ENUM, TTestStructWithSomeEnumClass))

/* struct TestUnion */
struct _TTestTestUnion
{ 
  ThriftStruct parent; 

  /* public */
  gchar * string_field;
  gboolean __isset_string_field;
  gint32 i32_field;
  gboolean __isset_i32_field;
  TTestOneOfEach * struct_field;
  gboolean __isset_struct_field;
  GPtrArray * struct_list;
  gboolean __isset_struct_list;
  gint32 other_i32_field;
  gboolean __isset_other_i32_field;
  TTestSomeEnum enum_field;
  gboolean __isset_enum_field;
  GHashTable * i32_set;
  gboolean __isset_i32_set;
  GHashTable * i32_map;
  gboolean __isset_i32_map;
};
typedef struct _TTestTestUnion TTestTestUnion;

struct _TTestTestUnionClass
{
  ThriftStructClass parent;
};
typedef struct _TTestTestUnionClass TTestTestUnionClass;

GType t_test_test_union_get_type (void);
#define T_TEST_TYPE_TEST_UNION (t_test_test_union_get_type())
#define T_TEST_TEST_UNION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_TEST_UNION, TTestTestUnion))
#define T_TEST_TEST_UNION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_TEST_UNION, TTestTestUnionClass))
#define T_TEST_IS_TEST_UNION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_TEST_UNION))
#define T_TEST_IS_TEST_UNION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_TEST_UNION))
#define T_TEST_TEST_UNION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_TEST_UNION, TTestTestUnionClass))

/* struct TestUnionMinusStringField */
struct _TTestTestUnionMinusStringField
{ 
  ThriftStruct parent; 

  /* public */
  gint32 i32_field;
  gboolean __isset_i32_field;
  TTestOneOfEach * struct_field;
  gboolean __isset_struct_field;
  GPtrArray * struct_list;
  gboolean __isset_struct_list;
  gint32 other_i32_field;
  gboolean __isset_other_i32_field;
  TTestSomeEnum enum_field;
  gboolean __isset_enum_field;
  GHashTable * i32_set;
  gboolean __isset_i32_set;
  GHashTable * i32_map;
  gboolean __isset_i32_map;
};
typedef struct _TTestTestUnionMinusStringField TTestTestUnionMinusStringField;

struct _TTestTestUnionMinusStringFieldClass
{
  ThriftStructClass parent;
};
typedef struct _TTestTestUnionMinusStringFieldClass TTestTestUnionMinusStringFieldClass;

GType t_test_test_union_minus_string_field_get_type (void);
#define T_TEST_TYPE_TEST_UNION_MINUS_STRING_FIELD (t_test_test_union_minus_string_field_get_type())
#define T_TEST_TEST_UNION_MINUS_STRING_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_TEST_UNION_MINUS_STRING_FIELD, TTestTestUnionMinusStringField))
#define T_TEST_TEST_UNION_MINUS_STRING_FIELD_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_TEST_UNION_MINUS_STRING_FIELD, TTestTestUnionMinusStringFieldClass))
#define T_TEST_IS_TEST_UNION_MINUS_STRING_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_TEST_UNION_MINUS_STRING_FIELD))
#define T_TEST_IS_TEST_UNION_MINUS_STRING_FIELD_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_TEST_UNION_MINUS_STRING_FIELD))
#define T_TEST_TEST_UNION_MINUS_STRING_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_TEST_UNION_MINUS_STRING_FIELD, TTestTestUnionMinusStringFieldClass))

/* struct ComparableUnion */
struct _TTestComparableUnion
{ 
  ThriftStruct parent; 

  /* public */
  gchar * string_field;
  gboolean __isset_string_field;
  GByteArray * binary_field;
  gboolean __isset_binary_field;
};
typedef struct _TTestComparableUnion TTestComparableUnion;

struct _TTestComparableUnionClass
{
  ThriftStructClass parent;
};
typedef struct _TTestComparableUnionClass TTestComparableUnionClass;

GType t_test_comparable_union_get_type (void);
#define T_TEST_TYPE_COMPARABLE_UNION (t_test_comparable_union_get_type())
#define T_TEST_COMPARABLE_UNION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_COMPARABLE_UNION, TTestComparableUnion))
#define T_TEST_COMPARABLE_UNION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_COMPARABLE_UNION, TTestComparableUnionClass))
#define T_TEST_IS_COMPARABLE_UNION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_COMPARABLE_UNION))
#define T_TEST_IS_COMPARABLE_UNION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_COMPARABLE_UNION))
#define T_TEST_COMPARABLE_UNION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_COMPARABLE_UNION, TTestComparableUnionClass))

/* struct StructWithAUnion */
struct _TTestStructWithAUnion
{ 
  ThriftStruct parent; 

  /* public */
  TTestTestUnion * test_union;
  gboolean __isset_test_union;
};
typedef struct _TTestStructWithAUnion TTestStructWithAUnion;

struct _TTestStructWithAUnionClass
{
  ThriftStructClass parent;
};
typedef struct _TTestStructWithAUnionClass TTestStructWithAUnionClass;

GType t_test_struct_with_a_union_get_type (void);
#define T_TEST_TYPE_STRUCT_WITH_A_UNION (t_test_struct_with_a_union_get_type())
#define T_TEST_STRUCT_WITH_A_UNION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_STRUCT_WITH_A_UNION, TTestStructWithAUnion))
#define T_TEST_STRUCT_WITH_A_UNION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_STRUCT_WITH_A_UNION, TTestStructWithAUnionClass))
#define T_TEST_IS_STRUCT_WITH_A_UNION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_STRUCT_WITH_A_UNION))
#define T_TEST_IS_STRUCT_WITH_A_UNION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_STRUCT_WITH_A_UNION))
#define T_TEST_STRUCT_WITH_A_UNION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_STRUCT_WITH_A_UNION, TTestStructWithAUnionClass))

/* struct PrimitiveThenStruct */
struct _TTestPrimitiveThenStruct
{ 
  ThriftStruct parent; 

  /* public */
  gint32 blah;
  gboolean __isset_blah;
  gint32 blah2;
  gboolean __isset_blah2;
  TTestBackwards * bw;
  gboolean __isset_bw;
};
typedef struct _TTestPrimitiveThenStruct TTestPrimitiveThenStruct;

struct _TTestPrimitiveThenStructClass
{
  ThriftStructClass parent;
};
typedef struct _TTestPrimitiveThenStructClass TTestPrimitiveThenStructClass;

GType t_test_primitive_then_struct_get_type (void);
#define T_TEST_TYPE_PRIMITIVE_THEN_STRUCT (t_test_primitive_then_struct_get_type())
#define T_TEST_PRIMITIVE_THEN_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_PRIMITIVE_THEN_STRUCT, TTestPrimitiveThenStruct))
#define T_TEST_PRIMITIVE_THEN_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_PRIMITIVE_THEN_STRUCT, TTestPrimitiveThenStructClass))
#define T_TEST_IS_PRIMITIVE_THEN_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_PRIMITIVE_THEN_STRUCT))
#define T_TEST_IS_PRIMITIVE_THEN_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_PRIMITIVE_THEN_STRUCT))
#define T_TEST_PRIMITIVE_THEN_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_PRIMITIVE_THEN_STRUCT, TTestPrimitiveThenStructClass))

/* struct StructWithASomemap */
struct _TTestStructWithASomemap
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * somemap_field;
};
typedef struct _TTestStructWithASomemap TTestStructWithASomemap;

struct _TTestStructWithASomemapClass
{
  ThriftStructClass parent;
};
typedef struct _TTestStructWithASomemapClass TTestStructWithASomemapClass;

GType t_test_struct_with_a_somemap_get_type (void);
#define T_TEST_TYPE_STRUCT_WITH_A_SOMEMAP (t_test_struct_with_a_somemap_get_type())
#define T_TEST_STRUCT_WITH_A_SOMEMAP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_STRUCT_WITH_A_SOMEMAP, TTestStructWithASomemap))
#define T_TEST_STRUCT_WITH_A_SOMEMAP_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_STRUCT_WITH_A_SOMEMAP, TTestStructWithASomemapClass))
#define T_TEST_IS_STRUCT_WITH_A_SOMEMAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_STRUCT_WITH_A_SOMEMAP))
#define T_TEST_IS_STRUCT_WITH_A_SOMEMAP_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_STRUCT_WITH_A_SOMEMAP))
#define T_TEST_STRUCT_WITH_A_SOMEMAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_STRUCT_WITH_A_SOMEMAP, TTestStructWithASomemapClass))

/* struct BigFieldIdStruct */
struct _TTestBigFieldIdStruct
{ 
  ThriftStruct parent; 

  /* public */
  gchar * field1;
  gboolean __isset_field1;
  gchar * field2;
  gboolean __isset_field2;
};
typedef struct _TTestBigFieldIdStruct TTestBigFieldIdStruct;

struct _TTestBigFieldIdStructClass
{
  ThriftStructClass parent;
};
typedef struct _TTestBigFieldIdStructClass TTestBigFieldIdStructClass;

GType t_test_big_field_id_struct_get_type (void);
#define T_TEST_TYPE_BIG_FIELD_ID_STRUCT (t_test_big_field_id_struct_get_type())
#define T_TEST_BIG_FIELD_ID_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_BIG_FIELD_ID_STRUCT, TTestBigFieldIdStruct))
#define T_TEST_BIG_FIELD_ID_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_BIG_FIELD_ID_STRUCT, TTestBigFieldIdStructClass))
#define T_TEST_IS_BIG_FIELD_ID_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_BIG_FIELD_ID_STRUCT))
#define T_TEST_IS_BIG_FIELD_ID_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_BIG_FIELD_ID_STRUCT))
#define T_TEST_BIG_FIELD_ID_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_BIG_FIELD_ID_STRUCT, TTestBigFieldIdStructClass))

/* struct BreaksRubyCompactProtocol */
struct _TTestBreaksRubyCompactProtocol
{ 
  ThriftStruct parent; 

  /* public */
  gchar * field1;
  gboolean __isset_field1;
  TTestBigFieldIdStruct * field2;
  gboolean __isset_field2;
  gint32 field3;
  gboolean __isset_field3;
};
typedef struct _TTestBreaksRubyCompactProtocol TTestBreaksRubyCompactProtocol;

struct _TTestBreaksRubyCompactProtocolClass
{
  ThriftStructClass parent;
};
typedef struct _TTestBreaksRubyCompactProtocolClass TTestBreaksRubyCompactProtocolClass;

GType t_test_breaks_ruby_compact_protocol_get_type (void);
#define T_TEST_TYPE_BREAKS_RUBY_COMPACT_PROTOCOL (t_test_breaks_ruby_compact_protocol_get_type())
#define T_TEST_BREAKS_RUBY_COMPACT_PROTOCOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_BREAKS_RUBY_COMPACT_PROTOCOL, TTestBreaksRubyCompactProtocol))
#define T_TEST_BREAKS_RUBY_COMPACT_PROTOCOL_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_BREAKS_RUBY_COMPACT_PROTOCOL, TTestBreaksRubyCompactProtocolClass))
#define T_TEST_IS_BREAKS_RUBY_COMPACT_PROTOCOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_BREAKS_RUBY_COMPACT_PROTOCOL))
#define T_TEST_IS_BREAKS_RUBY_COMPACT_PROTOCOL_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_BREAKS_RUBY_COMPACT_PROTOCOL))
#define T_TEST_BREAKS_RUBY_COMPACT_PROTOCOL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_BREAKS_RUBY_COMPACT_PROTOCOL, TTestBreaksRubyCompactProtocolClass))

/* struct TupleProtocolTestStruct */
struct _TTestTupleProtocolTestStruct
{ 
  ThriftStruct parent; 

  /* public */
  gint32 field1;
  gboolean __isset_field1;
  gint32 field2;
  gboolean __isset_field2;
  gint32 field3;
  gboolean __isset_field3;
  gint32 field4;
  gboolean __isset_field4;
  gint32 field5;
  gboolean __isset_field5;
  gint32 field6;
  gboolean __isset_field6;
  gint32 field7;
  gboolean __isset_field7;
  gint32 field8;
  gboolean __isset_field8;
  gint32 field9;
  gboolean __isset_field9;
  gint32 field10;
  gboolean __isset_field10;
  gint32 field11;
  gboolean __isset_field11;
  gint32 field12;
  gboolean __isset_field12;
};
typedef struct _TTestTupleProtocolTestStruct TTestTupleProtocolTestStruct;

struct _TTestTupleProtocolTestStructClass
{
  ThriftStructClass parent;
};
typedef struct _TTestTupleProtocolTestStructClass TTestTupleProtocolTestStructClass;

GType t_test_tuple_protocol_test_struct_get_type (void);
#define T_TEST_TYPE_TUPLE_PROTOCOL_TEST_STRUCT (t_test_tuple_protocol_test_struct_get_type())
#define T_TEST_TUPLE_PROTOCOL_TEST_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_TUPLE_PROTOCOL_TEST_STRUCT, TTestTupleProtocolTestStruct))
#define T_TEST_TUPLE_PROTOCOL_TEST_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_TUPLE_PROTOCOL_TEST_STRUCT, TTestTupleProtocolTestStructClass))
#define T_TEST_IS_TUPLE_PROTOCOL_TEST_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_TUPLE_PROTOCOL_TEST_STRUCT))
#define T_TEST_IS_TUPLE_PROTOCOL_TEST_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_TUPLE_PROTOCOL_TEST_STRUCT))
#define T_TEST_TUPLE_PROTOCOL_TEST_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_TUPLE_PROTOCOL_TEST_STRUCT, TTestTupleProtocolTestStructClass))

/* struct ListDoublePerf */
struct _TTestListDoublePerf
{ 
  ThriftStruct parent; 

  /* public */
  GArray * field;
  gboolean __isset_field;
};
typedef struct _TTestListDoublePerf TTestListDoublePerf;

struct _TTestListDoublePerfClass
{
  ThriftStructClass parent;
};
typedef struct _TTestListDoublePerfClass TTestListDoublePerfClass;

GType t_test_list_double_perf_get_type (void);
#define T_TEST_TYPE_LIST_DOUBLE_PERF (t_test_list_double_perf_get_type())
#define T_TEST_LIST_DOUBLE_PERF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_LIST_DOUBLE_PERF, TTestListDoublePerf))
#define T_TEST_LIST_DOUBLE_PERF_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_LIST_DOUBLE_PERF, TTestListDoublePerfClass))
#define T_TEST_IS_LIST_DOUBLE_PERF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_LIST_DOUBLE_PERF))
#define T_TEST_IS_LIST_DOUBLE_PERF_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_LIST_DOUBLE_PERF))
#define T_TEST_LIST_DOUBLE_PERF_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_LIST_DOUBLE_PERF, TTestListDoublePerfClass))

/* constants */
#define T_TEST_COMPACT_TEST (t_test_compact_test_constant())
#define T_TEST_MYCONST 2
#define T_TEST_MY_SOME_ENUM (TTestSomeEnum)1
#define T_TEST_MY_SOME_ENUM_1 (TTestSomeEnum)1
#define T_TEST_MY_ENUM_MAP (t_test_my_enum_map_constant())
#define T_TEST_EXTRA_CRAZY_MAP (t_test_extra_crazy_map_constant())

/* struct ServiceForExceptionWithAMapMethodThatThrowsAnExceptionArgs */
struct _TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionArgs
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionArgs TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionArgs;

struct _TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionArgsClass TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionArgsClass;

GType t_test_service_for_exception_with_a_map_method_that_throws_an_exception_args_get_type (void);
#define T_TEST_TYPE_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_ARGS (t_test_service_for_exception_with_a_map_method_that_throws_an_exception_args_get_type())
#define T_TEST_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_ARGS, TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionArgs))
#define T_TEST_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_ARGS, TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionArgsClass))
#define T_TEST_IS_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_ARGS))
#define T_TEST_IS_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_ARGS))
#define T_TEST_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_ARGS, TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionArgsClass))

/* struct ServiceForExceptionWithAMapMethodThatThrowsAnExceptionResult */
struct _TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionResult
{ 
  ThriftStruct parent; 

  /* public */
  TTestExceptionWithAMap * xwamap;
  gboolean __isset_xwamap;
};
typedef struct _TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionResult TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionResult;

struct _TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionResultClass TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionResultClass;

GType t_test_service_for_exception_with_a_map_method_that_throws_an_exception_result_get_type (void);
#define T_TEST_TYPE_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_RESULT (t_test_service_for_exception_with_a_map_method_that_throws_an_exception_result_get_type())
#define T_TEST_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_RESULT, TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionResult))
#define T_TEST_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_RESULT, TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionResultClass))
#define T_TEST_IS_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_RESULT))
#define T_TEST_IS_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_RESULT))
#define T_TEST_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SERVICE_FOR_EXCEPTION_WITH_A_MAP_METHOD_THAT_THROWS_AN_EXCEPTION_RESULT, TTestServiceForExceptionWithAMapMethodThatThrowsAnExceptionResultClass))

/* struct SrvJankyArgs */
struct _TTestSrvJankyArgs
{ 
  ThriftStruct parent; 

  /* public */
  gint32 arg;
  gboolean __isset_arg;
};
typedef struct _TTestSrvJankyArgs TTestSrvJankyArgs;

struct _TTestSrvJankyArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSrvJankyArgsClass TTestSrvJankyArgsClass;

GType t_test_srv_janky_args_get_type (void);
#define T_TEST_TYPE_SRV_JANKY_ARGS (t_test_srv_janky_args_get_type())
#define T_TEST_SRV_JANKY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SRV_JANKY_ARGS, TTestSrvJankyArgs))
#define T_TEST_SRV_JANKY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SRV_JANKY_ARGS, TTestSrvJankyArgsClass))
#define T_TEST_IS_SRV_JANKY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SRV_JANKY_ARGS))
#define T_TEST_IS_SRV_JANKY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SRV_JANKY_ARGS))
#define T_TEST_SRV_JANKY_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SRV_JANKY_ARGS, TTestSrvJankyArgsClass))

/* struct SrvJankyResult */
struct _TTestSrvJankyResult
{ 
  ThriftStruct parent; 

  /* public */
  gint32 success;
  gboolean __isset_success;
};
typedef struct _TTestSrvJankyResult TTestSrvJankyResult;

struct _TTestSrvJankyResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSrvJankyResultClass TTestSrvJankyResultClass;

GType t_test_srv_janky_result_get_type (void);
#define T_TEST_TYPE_SRV_JANKY_RESULT (t_test_srv_janky_result_get_type())
#define T_TEST_SRV_JANKY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SRV_JANKY_RESULT, TTestSrvJankyResult))
#define T_TEST_SRV_JANKY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SRV_JANKY_RESULT, TTestSrvJankyResultClass))
#define T_TEST_IS_SRV_JANKY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SRV_JANKY_RESULT))
#define T_TEST_IS_SRV_JANKY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SRV_JANKY_RESULT))
#define T_TEST_SRV_JANKY_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SRV_JANKY_RESULT, TTestSrvJankyResultClass))

/* struct SrvVoidMethodArgs */
struct _TTestSrvVoidMethodArgs
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestSrvVoidMethodArgs TTestSrvVoidMethodArgs;

struct _TTestSrvVoidMethodArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSrvVoidMethodArgsClass TTestSrvVoidMethodArgsClass;

GType t_test_srv_void_method_args_get_type (void);
#define T_TEST_TYPE_SRV_VOID_METHOD_ARGS (t_test_srv_void_method_args_get_type())
#define T_TEST_SRV_VOID_METHOD_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SRV_VOID_METHOD_ARGS, TTestSrvVoidMethodArgs))
#define T_TEST_SRV_VOID_METHOD_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SRV_VOID_METHOD_ARGS, TTestSrvVoidMethodArgsClass))
#define T_TEST_IS_SRV_VOID_METHOD_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SRV_VOID_METHOD_ARGS))
#define T_TEST_IS_SRV_VOID_METHOD_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SRV_VOID_METHOD_ARGS))
#define T_TEST_SRV_VOID_METHOD_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SRV_VOID_METHOD_ARGS, TTestSrvVoidMethodArgsClass))

/* struct SrvVoidMethodResult */
struct _TTestSrvVoidMethodResult
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestSrvVoidMethodResult TTestSrvVoidMethodResult;

struct _TTestSrvVoidMethodResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSrvVoidMethodResultClass TTestSrvVoidMethodResultClass;

GType t_test_srv_void_method_result_get_type (void);
#define T_TEST_TYPE_SRV_VOID_METHOD_RESULT (t_test_srv_void_method_result_get_type())
#define T_TEST_SRV_VOID_METHOD_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SRV_VOID_METHOD_RESULT, TTestSrvVoidMethodResult))
#define T_TEST_SRV_VOID_METHOD_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SRV_VOID_METHOD_RESULT, TTestSrvVoidMethodResultClass))
#define T_TEST_IS_SRV_VOID_METHOD_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SRV_VOID_METHOD_RESULT))
#define T_TEST_IS_SRV_VOID_METHOD_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SRV_VOID_METHOD_RESULT))
#define T_TEST_SRV_VOID_METHOD_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SRV_VOID_METHOD_RESULT, TTestSrvVoidMethodResultClass))

/* struct SrvPrimitiveMethodArgs */
struct _TTestSrvPrimitiveMethodArgs
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestSrvPrimitiveMethodArgs TTestSrvPrimitiveMethodArgs;

struct _TTestSrvPrimitiveMethodArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSrvPrimitiveMethodArgsClass TTestSrvPrimitiveMethodArgsClass;

GType t_test_srv_primitive_method_args_get_type (void);
#define T_TEST_TYPE_SRV_PRIMITIVE_METHOD_ARGS (t_test_srv_primitive_method_args_get_type())
#define T_TEST_SRV_PRIMITIVE_METHOD_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SRV_PRIMITIVE_METHOD_ARGS, TTestSrvPrimitiveMethodArgs))
#define T_TEST_SRV_PRIMITIVE_METHOD_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SRV_PRIMITIVE_METHOD_ARGS, TTestSrvPrimitiveMethodArgsClass))
#define T_TEST_IS_SRV_PRIMITIVE_METHOD_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SRV_PRIMITIVE_METHOD_ARGS))
#define T_TEST_IS_SRV_PRIMITIVE_METHOD_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SRV_PRIMITIVE_METHOD_ARGS))
#define T_TEST_SRV_PRIMITIVE_METHOD_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SRV_PRIMITIVE_METHOD_ARGS, TTestSrvPrimitiveMethodArgsClass))

/* struct SrvPrimitiveMethodResult */
struct _TTestSrvPrimitiveMethodResult
{ 
  ThriftStruct parent; 

  /* public */
  gint32 success;
  gboolean __isset_success;
};
typedef struct _TTestSrvPrimitiveMethodResult TTestSrvPrimitiveMethodResult;

struct _TTestSrvPrimitiveMethodResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSrvPrimitiveMethodResultClass TTestSrvPrimitiveMethodResultClass;

GType t_test_srv_primitive_method_result_get_type (void);
#define T_TEST_TYPE_SRV_PRIMITIVE_METHOD_RESULT (t_test_srv_primitive_method_result_get_type())
#define T_TEST_SRV_PRIMITIVE_METHOD_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SRV_PRIMITIVE_METHOD_RESULT, TTestSrvPrimitiveMethodResult))
#define T_TEST_SRV_PRIMITIVE_METHOD_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SRV_PRIMITIVE_METHOD_RESULT, TTestSrvPrimitiveMethodResultClass))
#define T_TEST_IS_SRV_PRIMITIVE_METHOD_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SRV_PRIMITIVE_METHOD_RESULT))
#define T_TEST_IS_SRV_PRIMITIVE_METHOD_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SRV_PRIMITIVE_METHOD_RESULT))
#define T_TEST_SRV_PRIMITIVE_METHOD_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SRV_PRIMITIVE_METHOD_RESULT, TTestSrvPrimitiveMethodResultClass))

/* struct SrvStructMethodArgs */
struct _TTestSrvStructMethodArgs
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestSrvStructMethodArgs TTestSrvStructMethodArgs;

struct _TTestSrvStructMethodArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSrvStructMethodArgsClass TTestSrvStructMethodArgsClass;

GType t_test_srv_struct_method_args_get_type (void);
#define T_TEST_TYPE_SRV_STRUCT_METHOD_ARGS (t_test_srv_struct_method_args_get_type())
#define T_TEST_SRV_STRUCT_METHOD_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SRV_STRUCT_METHOD_ARGS, TTestSrvStructMethodArgs))
#define T_TEST_SRV_STRUCT_METHOD_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SRV_STRUCT_METHOD_ARGS, TTestSrvStructMethodArgsClass))
#define T_TEST_IS_SRV_STRUCT_METHOD_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SRV_STRUCT_METHOD_ARGS))
#define T_TEST_IS_SRV_STRUCT_METHOD_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SRV_STRUCT_METHOD_ARGS))
#define T_TEST_SRV_STRUCT_METHOD_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SRV_STRUCT_METHOD_ARGS, TTestSrvStructMethodArgsClass))

/* struct SrvStructMethodResult */
struct _TTestSrvStructMethodResult
{ 
  ThriftStruct parent; 

  /* public */
  TTestCompactProtoTestStruct * success;
  gboolean __isset_success;
};
typedef struct _TTestSrvStructMethodResult TTestSrvStructMethodResult;

struct _TTestSrvStructMethodResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSrvStructMethodResultClass TTestSrvStructMethodResultClass;

GType t_test_srv_struct_method_result_get_type (void);
#define T_TEST_TYPE_SRV_STRUCT_METHOD_RESULT (t_test_srv_struct_method_result_get_type())
#define T_TEST_SRV_STRUCT_METHOD_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SRV_STRUCT_METHOD_RESULT, TTestSrvStructMethodResult))
#define T_TEST_SRV_STRUCT_METHOD_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SRV_STRUCT_METHOD_RESULT, TTestSrvStructMethodResultClass))
#define T_TEST_IS_SRV_STRUCT_METHOD_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SRV_STRUCT_METHOD_RESULT))
#define T_TEST_IS_SRV_STRUCT_METHOD_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SRV_STRUCT_METHOD_RESULT))
#define T_TEST_SRV_STRUCT_METHOD_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SRV_STRUCT_METHOD_RESULT, TTestSrvStructMethodResultClass))

/* struct SrvMethodWithDefaultArgsArgs */
struct _TTestSrvMethodWithDefaultArgsArgs
{ 
  ThriftStruct parent; 

  /* public */
  gint32 something;
  gboolean __isset_something;
};
typedef struct _TTestSrvMethodWithDefaultArgsArgs TTestSrvMethodWithDefaultArgsArgs;

struct _TTestSrvMethodWithDefaultArgsArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSrvMethodWithDefaultArgsArgsClass TTestSrvMethodWithDefaultArgsArgsClass;

GType t_test_srv_method_with_default_args_args_get_type (void);
#define T_TEST_TYPE_SRV_METHOD_WITH_DEFAULT_ARGS_ARGS (t_test_srv_method_with_default_args_args_get_type())
#define T_TEST_SRV_METHOD_WITH_DEFAULT_ARGS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SRV_METHOD_WITH_DEFAULT_ARGS_ARGS, TTestSrvMethodWithDefaultArgsArgs))
#define T_TEST_SRV_METHOD_WITH_DEFAULT_ARGS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SRV_METHOD_WITH_DEFAULT_ARGS_ARGS, TTestSrvMethodWithDefaultArgsArgsClass))
#define T_TEST_IS_SRV_METHOD_WITH_DEFAULT_ARGS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SRV_METHOD_WITH_DEFAULT_ARGS_ARGS))
#define T_TEST_IS_SRV_METHOD_WITH_DEFAULT_ARGS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SRV_METHOD_WITH_DEFAULT_ARGS_ARGS))
#define T_TEST_SRV_METHOD_WITH_DEFAULT_ARGS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SRV_METHOD_WITH_DEFAULT_ARGS_ARGS, TTestSrvMethodWithDefaultArgsArgsClass))

/* struct SrvMethodWithDefaultArgsResult */
struct _TTestSrvMethodWithDefaultArgsResult
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestSrvMethodWithDefaultArgsResult TTestSrvMethodWithDefaultArgsResult;

struct _TTestSrvMethodWithDefaultArgsResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSrvMethodWithDefaultArgsResultClass TTestSrvMethodWithDefaultArgsResultClass;

GType t_test_srv_method_with_default_args_result_get_type (void);
#define T_TEST_TYPE_SRV_METHOD_WITH_DEFAULT_ARGS_RESULT (t_test_srv_method_with_default_args_result_get_type())
#define T_TEST_SRV_METHOD_WITH_DEFAULT_ARGS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SRV_METHOD_WITH_DEFAULT_ARGS_RESULT, TTestSrvMethodWithDefaultArgsResult))
#define T_TEST_SRV_METHOD_WITH_DEFAULT_ARGS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SRV_METHOD_WITH_DEFAULT_ARGS_RESULT, TTestSrvMethodWithDefaultArgsResultClass))
#define T_TEST_IS_SRV_METHOD_WITH_DEFAULT_ARGS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SRV_METHOD_WITH_DEFAULT_ARGS_RESULT))
#define T_TEST_IS_SRV_METHOD_WITH_DEFAULT_ARGS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SRV_METHOD_WITH_DEFAULT_ARGS_RESULT))
#define T_TEST_SRV_METHOD_WITH_DEFAULT_ARGS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SRV_METHOD_WITH_DEFAULT_ARGS_RESULT, TTestSrvMethodWithDefaultArgsResultClass))

/* struct SrvOnewayMethodArgs */
struct _TTestSrvOnewayMethodArgs
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestSrvOnewayMethodArgs TTestSrvOnewayMethodArgs;

struct _TTestSrvOnewayMethodArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSrvOnewayMethodArgsClass TTestSrvOnewayMethodArgsClass;

GType t_test_srv_oneway_method_args_get_type (void);
#define T_TEST_TYPE_SRV_ONEWAY_METHOD_ARGS (t_test_srv_oneway_method_args_get_type())
#define T_TEST_SRV_ONEWAY_METHOD_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SRV_ONEWAY_METHOD_ARGS, TTestSrvOnewayMethodArgs))
#define T_TEST_SRV_ONEWAY_METHOD_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SRV_ONEWAY_METHOD_ARGS, TTestSrvOnewayMethodArgsClass))
#define T_TEST_IS_SRV_ONEWAY_METHOD_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SRV_ONEWAY_METHOD_ARGS))
#define T_TEST_IS_SRV_ONEWAY_METHOD_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SRV_ONEWAY_METHOD_ARGS))
#define T_TEST_SRV_ONEWAY_METHOD_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SRV_ONEWAY_METHOD_ARGS, TTestSrvOnewayMethodArgsClass))

/* struct InheritedIdentityArgs */
struct _TTestInheritedIdentityArgs
{ 
  ThriftStruct parent; 

  /* public */
  gint32 arg;
  gboolean __isset_arg;
};
typedef struct _TTestInheritedIdentityArgs TTestInheritedIdentityArgs;

struct _TTestInheritedIdentityArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestInheritedIdentityArgsClass TTestInheritedIdentityArgsClass;

GType t_test_inherited_identity_args_get_type (void);
#define T_TEST_TYPE_INHERITED_IDENTITY_ARGS (t_test_inherited_identity_args_get_type())
#define T_TEST_INHERITED_IDENTITY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_INHERITED_IDENTITY_ARGS, TTestInheritedIdentityArgs))
#define T_TEST_INHERITED_IDENTITY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_INHERITED_IDENTITY_ARGS, TTestInheritedIdentityArgsClass))
#define T_TEST_IS_INHERITED_IDENTITY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_INHERITED_IDENTITY_ARGS))
#define T_TEST_IS_INHERITED_IDENTITY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_INHERITED_IDENTITY_ARGS))
#define T_TEST_INHERITED_IDENTITY_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_INHERITED_IDENTITY_ARGS, TTestInheritedIdentityArgsClass))

/* struct InheritedIdentityResult */
struct _TTestInheritedIdentityResult
{ 
  ThriftStruct parent; 

  /* public */
  gint32 success;
  gboolean __isset_success;
};
typedef struct _TTestInheritedIdentityResult TTestInheritedIdentityResult;

struct _TTestInheritedIdentityResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestInheritedIdentityResultClass TTestInheritedIdentityResultClass;

GType t_test_inherited_identity_result_get_type (void);
#define T_TEST_TYPE_INHERITED_IDENTITY_RESULT (t_test_inherited_identity_result_get_type())
#define T_TEST_INHERITED_IDENTITY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_INHERITED_IDENTITY_RESULT, TTestInheritedIdentityResult))
#define T_TEST_INHERITED_IDENTITY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_INHERITED_IDENTITY_RESULT, TTestInheritedIdentityResultClass))
#define T_TEST_IS_INHERITED_IDENTITY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_INHERITED_IDENTITY_RESULT))
#define T_TEST_IS_INHERITED_IDENTITY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_INHERITED_IDENTITY_RESULT))
#define T_TEST_INHERITED_IDENTITY_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_INHERITED_IDENTITY_RESULT, TTestInheritedIdentityResultClass))

/* struct ReverseOrderServiceMyMethodArgs */
struct _TTestReverseOrderServiceMyMethodArgs
{ 
  ThriftStruct parent; 

  /* public */
  gchar * first;
  gboolean __isset_first;
  gint16 second;
  gboolean __isset_second;
  gint32 third;
  gboolean __isset_third;
  gint64 fourth;
  gboolean __isset_fourth;
};
typedef struct _TTestReverseOrderServiceMyMethodArgs TTestReverseOrderServiceMyMethodArgs;

struct _TTestReverseOrderServiceMyMethodArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestReverseOrderServiceMyMethodArgsClass TTestReverseOrderServiceMyMethodArgsClass;

GType t_test_reverse_order_service_my_method_args_get_type (void);
#define T_TEST_TYPE_REVERSE_ORDER_SERVICE_MY_METHOD_ARGS (t_test_reverse_order_service_my_method_args_get_type())
#define T_TEST_REVERSE_ORDER_SERVICE_MY_METHOD_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_REVERSE_ORDER_SERVICE_MY_METHOD_ARGS, TTestReverseOrderServiceMyMethodArgs))
#define T_TEST_REVERSE_ORDER_SERVICE_MY_METHOD_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_REVERSE_ORDER_SERVICE_MY_METHOD_ARGS, TTestReverseOrderServiceMyMethodArgsClass))
#define T_TEST_IS_REVERSE_ORDER_SERVICE_MY_METHOD_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_REVERSE_ORDER_SERVICE_MY_METHOD_ARGS))
#define T_TEST_IS_REVERSE_ORDER_SERVICE_MY_METHOD_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_REVERSE_ORDER_SERVICE_MY_METHOD_ARGS))
#define T_TEST_REVERSE_ORDER_SERVICE_MY_METHOD_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_REVERSE_ORDER_SERVICE_MY_METHOD_ARGS, TTestReverseOrderServiceMyMethodArgsClass))

/* struct ReverseOrderServiceMyMethodResult */
struct _TTestReverseOrderServiceMyMethodResult
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestReverseOrderServiceMyMethodResult TTestReverseOrderServiceMyMethodResult;

struct _TTestReverseOrderServiceMyMethodResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestReverseOrderServiceMyMethodResultClass TTestReverseOrderServiceMyMethodResultClass;

GType t_test_reverse_order_service_my_method_result_get_type (void);
#define T_TEST_TYPE_REVERSE_ORDER_SERVICE_MY_METHOD_RESULT (t_test_reverse_order_service_my_method_result_get_type())
#define T_TEST_REVERSE_ORDER_SERVICE_MY_METHOD_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_REVERSE_ORDER_SERVICE_MY_METHOD_RESULT, TTestReverseOrderServiceMyMethodResult))
#define T_TEST_REVERSE_ORDER_SERVICE_MY_METHOD_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_REVERSE_ORDER_SERVICE_MY_METHOD_RESULT, TTestReverseOrderServiceMyMethodResultClass))
#define T_TEST_IS_REVERSE_ORDER_SERVICE_MY_METHOD_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_REVERSE_ORDER_SERVICE_MY_METHOD_RESULT))
#define T_TEST_IS_REVERSE_ORDER_SERVICE_MY_METHOD_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_REVERSE_ORDER_SERVICE_MY_METHOD_RESULT))
#define T_TEST_REVERSE_ORDER_SERVICE_MY_METHOD_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_REVERSE_ORDER_SERVICE_MY_METHOD_RESULT, TTestReverseOrderServiceMyMethodResultClass))

#endif /* T_TEST_DEBUG_PROTO_TEST_TYPES_H */
