/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef T_TEST_THRIFT_TEST_TYPES_H
#define T_TEST_THRIFT_TEST_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>

/* custom thrift includes */

/* begin types */

enum _TTestNumberz {
  T_TEST_NUMBERZ_ONE = 1,
  T_TEST_NUMBERZ_TWO = 2,
  T_TEST_NUMBERZ_THREE = 3,
  T_TEST_NUMBERZ_FIVE = 5,
  T_TEST_NUMBERZ_SIX = 6,
  T_TEST_NUMBERZ_EIGHT = 8
};
typedef enum _TTestNumberz TTestNumberz;

/* return the name of the constant */
const char *
toString_Numberz(int value); 

typedef gint64 TTestUserId;

typedef GHashTable TTestMapType;

/* struct Bonk */
struct _TTestBonk
{ 
  ThriftStruct parent; 

  /* public */
  gchar * message;
  gboolean __isset_message;
  gint32 type;
  gboolean __isset_type;
};
typedef struct _TTestBonk TTestBonk;

struct _TTestBonkClass
{
  ThriftStructClass parent;
};
typedef struct _TTestBonkClass TTestBonkClass;

GType t_test_bonk_get_type (void);
#define T_TEST_TYPE_BONK (t_test_bonk_get_type())
#define T_TEST_BONK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_BONK, TTestBonk))
#define T_TEST_BONK_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_BONK, TTestBonkClass))
#define T_TEST_IS_BONK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_BONK))
#define T_TEST_IS_BONK_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_BONK))
#define T_TEST_BONK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_BONK, TTestBonkClass))

/* struct Bools */
struct _TTestBools
{ 
  ThriftStruct parent; 

  /* public */
  gboolean im_true;
  gboolean __isset_im_true;
  gboolean im_false;
  gboolean __isset_im_false;
};
typedef struct _TTestBools TTestBools;

struct _TTestBoolsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestBoolsClass TTestBoolsClass;

GType t_test_bools_get_type (void);
#define T_TEST_TYPE_BOOLS (t_test_bools_get_type())
#define T_TEST_BOOLS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_BOOLS, TTestBools))
#define T_TEST_BOOLS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_BOOLS, TTestBoolsClass))
#define T_TEST_IS_BOOLS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_BOOLS))
#define T_TEST_IS_BOOLS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_BOOLS))
#define T_TEST_BOOLS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_BOOLS, TTestBoolsClass))

/* struct Xtruct */
struct _TTestXtruct
{ 
  ThriftStruct parent; 

  /* public */
  gchar * string_thing;
  gboolean __isset_string_thing;
  gint8 byte_thing;
  gboolean __isset_byte_thing;
  gint32 i32_thing;
  gboolean __isset_i32_thing;
  gint64 i64_thing;
  gboolean __isset_i64_thing;
};
typedef struct _TTestXtruct TTestXtruct;

struct _TTestXtructClass
{
  ThriftStructClass parent;
};
typedef struct _TTestXtructClass TTestXtructClass;

GType t_test_xtruct_get_type (void);
#define T_TEST_TYPE_XTRUCT (t_test_xtruct_get_type())
#define T_TEST_XTRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_XTRUCT, TTestXtruct))
#define T_TEST_XTRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_XTRUCT, TTestXtructClass))
#define T_TEST_IS_XTRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_XTRUCT))
#define T_TEST_IS_XTRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_XTRUCT))
#define T_TEST_XTRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_XTRUCT, TTestXtructClass))

/* struct Xtruct2 */
struct _TTestXtruct2
{ 
  ThriftStruct parent; 

  /* public */
  gint8 byte_thing;
  gboolean __isset_byte_thing;
  TTestXtruct * struct_thing;
  gboolean __isset_struct_thing;
  gint32 i32_thing;
  gboolean __isset_i32_thing;
};
typedef struct _TTestXtruct2 TTestXtruct2;

struct _TTestXtruct2Class
{
  ThriftStructClass parent;
};
typedef struct _TTestXtruct2Class TTestXtruct2Class;

GType t_test_xtruct2_get_type (void);
#define T_TEST_TYPE_XTRUCT2 (t_test_xtruct2_get_type())
#define T_TEST_XTRUCT2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_XTRUCT2, TTestXtruct2))
#define T_TEST_XTRUCT2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_XTRUCT2, TTestXtruct2Class))
#define T_TEST_IS_XTRUCT2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_XTRUCT2))
#define T_TEST_IS_XTRUCT2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_XTRUCT2))
#define T_TEST_XTRUCT2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_XTRUCT2, TTestXtruct2Class))

/* struct Xtruct3 */
struct _TTestXtruct3
{ 
  ThriftStruct parent; 

  /* public */
  gchar * string_thing;
  gboolean __isset_string_thing;
  gint32 changed;
  gboolean __isset_changed;
  gint32 i32_thing;
  gboolean __isset_i32_thing;
  gint64 i64_thing;
  gboolean __isset_i64_thing;
};
typedef struct _TTestXtruct3 TTestXtruct3;

struct _TTestXtruct3Class
{
  ThriftStructClass parent;
};
typedef struct _TTestXtruct3Class TTestXtruct3Class;

GType t_test_xtruct3_get_type (void);
#define T_TEST_TYPE_XTRUCT3 (t_test_xtruct3_get_type())
#define T_TEST_XTRUCT3(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_XTRUCT3, TTestXtruct3))
#define T_TEST_XTRUCT3_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_XTRUCT3, TTestXtruct3Class))
#define T_TEST_IS_XTRUCT3(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_XTRUCT3))
#define T_TEST_IS_XTRUCT3_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_XTRUCT3))
#define T_TEST_XTRUCT3_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_XTRUCT3, TTestXtruct3Class))

/* struct Insanity */
struct _TTestInsanity
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * userMap;
  gboolean __isset_userMap;
  GPtrArray * xtructs;
  gboolean __isset_xtructs;
};
typedef struct _TTestInsanity TTestInsanity;

struct _TTestInsanityClass
{
  ThriftStructClass parent;
};
typedef struct _TTestInsanityClass TTestInsanityClass;

GType t_test_insanity_get_type (void);
#define T_TEST_TYPE_INSANITY (t_test_insanity_get_type())
#define T_TEST_INSANITY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_INSANITY, TTestInsanity))
#define T_TEST_INSANITY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_INSANITY, TTestInsanityClass))
#define T_TEST_IS_INSANITY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_INSANITY))
#define T_TEST_IS_INSANITY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_INSANITY))
#define T_TEST_INSANITY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_INSANITY, TTestInsanityClass))

/* struct CrazyNesting */
struct _TTestCrazyNesting
{ 
  ThriftStruct parent; 

  /* public */
  gchar * string_field;
  gboolean __isset_string_field;
  GHashTable * set_field;
  gboolean __isset_set_field;
  GPtrArray * list_field;
  GByteArray * binary_field;
  gboolean __isset_binary_field;
};
typedef struct _TTestCrazyNesting TTestCrazyNesting;

struct _TTestCrazyNestingClass
{
  ThriftStructClass parent;
};
typedef struct _TTestCrazyNestingClass TTestCrazyNestingClass;

GType t_test_crazy_nesting_get_type (void);
#define T_TEST_TYPE_CRAZY_NESTING (t_test_crazy_nesting_get_type())
#define T_TEST_CRAZY_NESTING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_CRAZY_NESTING, TTestCrazyNesting))
#define T_TEST_CRAZY_NESTING_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_CRAZY_NESTING, TTestCrazyNestingClass))
#define T_TEST_IS_CRAZY_NESTING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_CRAZY_NESTING))
#define T_TEST_IS_CRAZY_NESTING_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_CRAZY_NESTING))
#define T_TEST_CRAZY_NESTING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_CRAZY_NESTING, TTestCrazyNestingClass))

struct _TTestXception
{ 
  ThriftStruct parent; 

  /* public */
  gint32 errorCode;
  gboolean __isset_errorCode;
  gchar * message;
  gboolean __isset_message;
};
typedef struct _TTestXception TTestXception;

struct _TTestXceptionClass
{
  ThriftStructClass parent;
};
typedef struct _TTestXceptionClass TTestXceptionClass;

GType t_test_xception_get_type (void);
#define T_TEST_TYPE_XCEPTION (t_test_xception_get_type())
#define T_TEST_XCEPTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_XCEPTION, TTestXception))
#define T_TEST_XCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_XCEPTION, TTestXceptionClass))
#define T_TEST_IS_XCEPTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_XCEPTION))
#define T_TEST_IS_XCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_XCEPTION))
#define T_TEST_XCEPTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_XCEPTION, TTestXceptionClass))

/* exception */
typedef enum
{
  T_TEST_XCEPTION_ERROR_CODE
} TTestXceptionError;

GQuark t_test_xception_error_quark (void);
#define T_TEST_XCEPTION_ERROR (t_test_xception_error_quark())


struct _TTestXception2
{ 
  ThriftStruct parent; 

  /* public */
  gint32 errorCode;
  gboolean __isset_errorCode;
  TTestXtruct * struct_thing;
  gboolean __isset_struct_thing;
};
typedef struct _TTestXception2 TTestXception2;

struct _TTestXception2Class
{
  ThriftStructClass parent;
};
typedef struct _TTestXception2Class TTestXception2Class;

GType t_test_xception2_get_type (void);
#define T_TEST_TYPE_XCEPTION2 (t_test_xception2_get_type())
#define T_TEST_XCEPTION2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_XCEPTION2, TTestXception2))
#define T_TEST_XCEPTION2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_XCEPTION2, TTestXception2Class))
#define T_TEST_IS_XCEPTION2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_XCEPTION2))
#define T_TEST_IS_XCEPTION2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_XCEPTION2))
#define T_TEST_XCEPTION2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_XCEPTION2, TTestXception2Class))

/* exception */
typedef enum
{
  T_TEST_XCEPTION2_ERROR_CODE
} TTestXception2Error;

GQuark t_test_xception2_error_quark (void);
#define T_TEST_XCEPTION2_ERROR (t_test_xception2_error_quark())


/* struct EmptyStruct */
struct _TTestEmptyStruct
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestEmptyStruct TTestEmptyStruct;

struct _TTestEmptyStructClass
{
  ThriftStructClass parent;
};
typedef struct _TTestEmptyStructClass TTestEmptyStructClass;

GType t_test_empty_struct_get_type (void);
#define T_TEST_TYPE_EMPTY_STRUCT (t_test_empty_struct_get_type())
#define T_TEST_EMPTY_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_EMPTY_STRUCT, TTestEmptyStruct))
#define T_TEST_EMPTY_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_EMPTY_STRUCT, TTestEmptyStructClass))
#define T_TEST_IS_EMPTY_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_EMPTY_STRUCT))
#define T_TEST_IS_EMPTY_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_EMPTY_STRUCT))
#define T_TEST_EMPTY_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_EMPTY_STRUCT, TTestEmptyStructClass))

/* struct OneField */
struct _TTestOneField
{ 
  ThriftStruct parent; 

  /* public */
  TTestEmptyStruct * field;
  gboolean __isset_field;
};
typedef struct _TTestOneField TTestOneField;

struct _TTestOneFieldClass
{
  ThriftStructClass parent;
};
typedef struct _TTestOneFieldClass TTestOneFieldClass;

GType t_test_one_field_get_type (void);
#define T_TEST_TYPE_ONE_FIELD (t_test_one_field_get_type())
#define T_TEST_ONE_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_ONE_FIELD, TTestOneField))
#define T_TEST_ONE_FIELD_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_ONE_FIELD, TTestOneFieldClass))
#define T_TEST_IS_ONE_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_ONE_FIELD))
#define T_TEST_IS_ONE_FIELD_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_ONE_FIELD))
#define T_TEST_ONE_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_ONE_FIELD, TTestOneFieldClass))

/* struct VersioningTestV1 */
struct _TTestVersioningTestV1
{ 
  ThriftStruct parent; 

  /* public */
  gint32 begin_in_both;
  gboolean __isset_begin_in_both;
  gchar * old_string;
  gboolean __isset_old_string;
  gint32 end_in_both;
  gboolean __isset_end_in_both;
};
typedef struct _TTestVersioningTestV1 TTestVersioningTestV1;

struct _TTestVersioningTestV1Class
{
  ThriftStructClass parent;
};
typedef struct _TTestVersioningTestV1Class TTestVersioningTestV1Class;

GType t_test_versioning_test_v1_get_type (void);
#define T_TEST_TYPE_VERSIONING_TEST_V1 (t_test_versioning_test_v1_get_type())
#define T_TEST_VERSIONING_TEST_V1(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_VERSIONING_TEST_V1, TTestVersioningTestV1))
#define T_TEST_VERSIONING_TEST_V1_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_VERSIONING_TEST_V1, TTestVersioningTestV1Class))
#define T_TEST_IS_VERSIONING_TEST_V1(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_VERSIONING_TEST_V1))
#define T_TEST_IS_VERSIONING_TEST_V1_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_VERSIONING_TEST_V1))
#define T_TEST_VERSIONING_TEST_V1_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_VERSIONING_TEST_V1, TTestVersioningTestV1Class))

/* struct VersioningTestV2 */
struct _TTestVersioningTestV2
{ 
  ThriftStruct parent; 

  /* public */
  gint32 begin_in_both;
  gboolean __isset_begin_in_both;
  gint32 newint;
  gboolean __isset_newint;
  gint8 newbyte;
  gboolean __isset_newbyte;
  gint16 newshort;
  gboolean __isset_newshort;
  gint64 newlong;
  gboolean __isset_newlong;
  gdouble newdouble;
  gboolean __isset_newdouble;
  TTestBonk * newstruct;
  gboolean __isset_newstruct;
  GArray * newlist;
  gboolean __isset_newlist;
  GHashTable * newset;
  gboolean __isset_newset;
  GHashTable * newmap;
  gboolean __isset_newmap;
  gchar * newstring;
  gboolean __isset_newstring;
  gint32 end_in_both;
  gboolean __isset_end_in_both;
};
typedef struct _TTestVersioningTestV2 TTestVersioningTestV2;

struct _TTestVersioningTestV2Class
{
  ThriftStructClass parent;
};
typedef struct _TTestVersioningTestV2Class TTestVersioningTestV2Class;

GType t_test_versioning_test_v2_get_type (void);
#define T_TEST_TYPE_VERSIONING_TEST_V2 (t_test_versioning_test_v2_get_type())
#define T_TEST_VERSIONING_TEST_V2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_VERSIONING_TEST_V2, TTestVersioningTestV2))
#define T_TEST_VERSIONING_TEST_V2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_VERSIONING_TEST_V2, TTestVersioningTestV2Class))
#define T_TEST_IS_VERSIONING_TEST_V2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_VERSIONING_TEST_V2))
#define T_TEST_IS_VERSIONING_TEST_V2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_VERSIONING_TEST_V2))
#define T_TEST_VERSIONING_TEST_V2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_VERSIONING_TEST_V2, TTestVersioningTestV2Class))

/* struct ListTypeVersioningV1 */
struct _TTestListTypeVersioningV1
{ 
  ThriftStruct parent; 

  /* public */
  GArray * myints;
  gboolean __isset_myints;
  gchar * hello;
  gboolean __isset_hello;
};
typedef struct _TTestListTypeVersioningV1 TTestListTypeVersioningV1;

struct _TTestListTypeVersioningV1Class
{
  ThriftStructClass parent;
};
typedef struct _TTestListTypeVersioningV1Class TTestListTypeVersioningV1Class;

GType t_test_list_type_versioning_v1_get_type (void);
#define T_TEST_TYPE_LIST_TYPE_VERSIONING_V1 (t_test_list_type_versioning_v1_get_type())
#define T_TEST_LIST_TYPE_VERSIONING_V1(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_LIST_TYPE_VERSIONING_V1, TTestListTypeVersioningV1))
#define T_TEST_LIST_TYPE_VERSIONING_V1_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_LIST_TYPE_VERSIONING_V1, TTestListTypeVersioningV1Class))
#define T_TEST_IS_LIST_TYPE_VERSIONING_V1(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_LIST_TYPE_VERSIONING_V1))
#define T_TEST_IS_LIST_TYPE_VERSIONING_V1_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_LIST_TYPE_VERSIONING_V1))
#define T_TEST_LIST_TYPE_VERSIONING_V1_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_LIST_TYPE_VERSIONING_V1, TTestListTypeVersioningV1Class))

/* struct ListTypeVersioningV2 */
struct _TTestListTypeVersioningV2
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * strings;
  gboolean __isset_strings;
  gchar * hello;
  gboolean __isset_hello;
};
typedef struct _TTestListTypeVersioningV2 TTestListTypeVersioningV2;

struct _TTestListTypeVersioningV2Class
{
  ThriftStructClass parent;
};
typedef struct _TTestListTypeVersioningV2Class TTestListTypeVersioningV2Class;

GType t_test_list_type_versioning_v2_get_type (void);
#define T_TEST_TYPE_LIST_TYPE_VERSIONING_V2 (t_test_list_type_versioning_v2_get_type())
#define T_TEST_LIST_TYPE_VERSIONING_V2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_LIST_TYPE_VERSIONING_V2, TTestListTypeVersioningV2))
#define T_TEST_LIST_TYPE_VERSIONING_V2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_LIST_TYPE_VERSIONING_V2, TTestListTypeVersioningV2Class))
#define T_TEST_IS_LIST_TYPE_VERSIONING_V2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_LIST_TYPE_VERSIONING_V2))
#define T_TEST_IS_LIST_TYPE_VERSIONING_V2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_LIST_TYPE_VERSIONING_V2))
#define T_TEST_LIST_TYPE_VERSIONING_V2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_LIST_TYPE_VERSIONING_V2, TTestListTypeVersioningV2Class))

/* struct GuessProtocolStruct */
struct _TTestGuessProtocolStruct
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * map_field;
  gboolean __isset_map_field;
};
typedef struct _TTestGuessProtocolStruct TTestGuessProtocolStruct;

struct _TTestGuessProtocolStructClass
{
  ThriftStructClass parent;
};
typedef struct _TTestGuessProtocolStructClass TTestGuessProtocolStructClass;

GType t_test_guess_protocol_struct_get_type (void);
#define T_TEST_TYPE_GUESS_PROTOCOL_STRUCT (t_test_guess_protocol_struct_get_type())
#define T_TEST_GUESS_PROTOCOL_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_GUESS_PROTOCOL_STRUCT, TTestGuessProtocolStruct))
#define T_TEST_GUESS_PROTOCOL_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_GUESS_PROTOCOL_STRUCT, TTestGuessProtocolStructClass))
#define T_TEST_IS_GUESS_PROTOCOL_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_GUESS_PROTOCOL_STRUCT))
#define T_TEST_IS_GUESS_PROTOCOL_STRUCT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_GUESS_PROTOCOL_STRUCT))
#define T_TEST_GUESS_PROTOCOL_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_GUESS_PROTOCOL_STRUCT, TTestGuessProtocolStructClass))

/* struct LargeDeltas */
struct _TTestLargeDeltas
{ 
  ThriftStruct parent; 

  /* public */
  TTestBools * b1;
  gboolean __isset_b1;
  TTestBools * b10;
  gboolean __isset_b10;
  TTestBools * b100;
  gboolean __isset_b100;
  gboolean check_true;
  gboolean __isset_check_true;
  TTestBools * b1000;
  gboolean __isset_b1000;
  gboolean check_false;
  gboolean __isset_check_false;
  TTestVersioningTestV2 * vertwo2000;
  gboolean __isset_vertwo2000;
  GHashTable * a_set2500;
  gboolean __isset_a_set2500;
  TTestVersioningTestV2 * vertwo3000;
  gboolean __isset_vertwo3000;
  GArray * big_numbers;
  gboolean __isset_big_numbers;
};
typedef struct _TTestLargeDeltas TTestLargeDeltas;

struct _TTestLargeDeltasClass
{
  ThriftStructClass parent;
};
typedef struct _TTestLargeDeltasClass TTestLargeDeltasClass;

GType t_test_large_deltas_get_type (void);
#define T_TEST_TYPE_LARGE_DELTAS (t_test_large_deltas_get_type())
#define T_TEST_LARGE_DELTAS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_LARGE_DELTAS, TTestLargeDeltas))
#define T_TEST_LARGE_DELTAS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_LARGE_DELTAS, TTestLargeDeltasClass))
#define T_TEST_IS_LARGE_DELTAS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_LARGE_DELTAS))
#define T_TEST_IS_LARGE_DELTAS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_LARGE_DELTAS))
#define T_TEST_LARGE_DELTAS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_LARGE_DELTAS, TTestLargeDeltasClass))

/* struct NestedListsI32x2 */
struct _TTestNestedListsI32x2
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * integerlist;
  gboolean __isset_integerlist;
};
typedef struct _TTestNestedListsI32x2 TTestNestedListsI32x2;

struct _TTestNestedListsI32x2Class
{
  ThriftStructClass parent;
};
typedef struct _TTestNestedListsI32x2Class TTestNestedListsI32x2Class;

GType t_test_nested_lists_i32x2_get_type (void);
#define T_TEST_TYPE_NESTED_LISTS_I32X2 (t_test_nested_lists_i32x2_get_type())
#define T_TEST_NESTED_LISTS_I32X2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_NESTED_LISTS_I32X2, TTestNestedListsI32x2))
#define T_TEST_NESTED_LISTS_I32X2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_NESTED_LISTS_I32X2, TTestNestedListsI32x2Class))
#define T_TEST_IS_NESTED_LISTS_I32X2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_NESTED_LISTS_I32X2))
#define T_TEST_IS_NESTED_LISTS_I32X2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_NESTED_LISTS_I32X2))
#define T_TEST_NESTED_LISTS_I32X2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_NESTED_LISTS_I32X2, TTestNestedListsI32x2Class))

/* struct NestedListsI32x3 */
struct _TTestNestedListsI32x3
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * integerlist;
  gboolean __isset_integerlist;
};
typedef struct _TTestNestedListsI32x3 TTestNestedListsI32x3;

struct _TTestNestedListsI32x3Class
{
  ThriftStructClass parent;
};
typedef struct _TTestNestedListsI32x3Class TTestNestedListsI32x3Class;

GType t_test_nested_lists_i32x3_get_type (void);
#define T_TEST_TYPE_NESTED_LISTS_I32X3 (t_test_nested_lists_i32x3_get_type())
#define T_TEST_NESTED_LISTS_I32X3(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_NESTED_LISTS_I32X3, TTestNestedListsI32x3))
#define T_TEST_NESTED_LISTS_I32X3_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_NESTED_LISTS_I32X3, TTestNestedListsI32x3Class))
#define T_TEST_IS_NESTED_LISTS_I32X3(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_NESTED_LISTS_I32X3))
#define T_TEST_IS_NESTED_LISTS_I32X3_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_NESTED_LISTS_I32X3))
#define T_TEST_NESTED_LISTS_I32X3_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_NESTED_LISTS_I32X3, TTestNestedListsI32x3Class))

/* struct NestedMixedx2 */
struct _TTestNestedMixedx2
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * int_set_list;
  gboolean __isset_int_set_list;
  GHashTable * map_int_strset;
  gboolean __isset_map_int_strset;
  GPtrArray * map_int_strset_list;
  gboolean __isset_map_int_strset_list;
};
typedef struct _TTestNestedMixedx2 TTestNestedMixedx2;

struct _TTestNestedMixedx2Class
{
  ThriftStructClass parent;
};
typedef struct _TTestNestedMixedx2Class TTestNestedMixedx2Class;

GType t_test_nested_mixedx2_get_type (void);
#define T_TEST_TYPE_NESTED_MIXEDX2 (t_test_nested_mixedx2_get_type())
#define T_TEST_NESTED_MIXEDX2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_NESTED_MIXEDX2, TTestNestedMixedx2))
#define T_TEST_NESTED_MIXEDX2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_NESTED_MIXEDX2, TTestNestedMixedx2Class))
#define T_TEST_IS_NESTED_MIXEDX2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_NESTED_MIXEDX2))
#define T_TEST_IS_NESTED_MIXEDX2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_NESTED_MIXEDX2))
#define T_TEST_NESTED_MIXEDX2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_NESTED_MIXEDX2, TTestNestedMixedx2Class))

/* struct ListBonks */
struct _TTestListBonks
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * bonk;
  gboolean __isset_bonk;
};
typedef struct _TTestListBonks TTestListBonks;

struct _TTestListBonksClass
{
  ThriftStructClass parent;
};
typedef struct _TTestListBonksClass TTestListBonksClass;

GType t_test_list_bonks_get_type (void);
#define T_TEST_TYPE_LIST_BONKS (t_test_list_bonks_get_type())
#define T_TEST_LIST_BONKS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_LIST_BONKS, TTestListBonks))
#define T_TEST_LIST_BONKS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_LIST_BONKS, TTestListBonksClass))
#define T_TEST_IS_LIST_BONKS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_LIST_BONKS))
#define T_TEST_IS_LIST_BONKS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_LIST_BONKS))
#define T_TEST_LIST_BONKS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_LIST_BONKS, TTestListBonksClass))

/* struct NestedListsBonk */
struct _TTestNestedListsBonk
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * bonk;
  gboolean __isset_bonk;
};
typedef struct _TTestNestedListsBonk TTestNestedListsBonk;

struct _TTestNestedListsBonkClass
{
  ThriftStructClass parent;
};
typedef struct _TTestNestedListsBonkClass TTestNestedListsBonkClass;

GType t_test_nested_lists_bonk_get_type (void);
#define T_TEST_TYPE_NESTED_LISTS_BONK (t_test_nested_lists_bonk_get_type())
#define T_TEST_NESTED_LISTS_BONK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_NESTED_LISTS_BONK, TTestNestedListsBonk))
#define T_TEST_NESTED_LISTS_BONK_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_NESTED_LISTS_BONK, TTestNestedListsBonkClass))
#define T_TEST_IS_NESTED_LISTS_BONK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_NESTED_LISTS_BONK))
#define T_TEST_IS_NESTED_LISTS_BONK_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_NESTED_LISTS_BONK))
#define T_TEST_NESTED_LISTS_BONK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_NESTED_LISTS_BONK, TTestNestedListsBonkClass))

/* struct BoolTest */
struct _TTestBoolTest
{ 
  ThriftStruct parent; 

  /* public */
  gboolean b;
  gboolean __isset_b;
  gchar * s;
  gboolean __isset_s;
};
typedef struct _TTestBoolTest TTestBoolTest;

struct _TTestBoolTestClass
{
  ThriftStructClass parent;
};
typedef struct _TTestBoolTestClass TTestBoolTestClass;

GType t_test_bool_test_get_type (void);
#define T_TEST_TYPE_BOOL_TEST (t_test_bool_test_get_type())
#define T_TEST_BOOL_TEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_BOOL_TEST, TTestBoolTest))
#define T_TEST_BOOL_TEST_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_BOOL_TEST, TTestBoolTestClass))
#define T_TEST_IS_BOOL_TEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_BOOL_TEST))
#define T_TEST_IS_BOOL_TEST_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_BOOL_TEST))
#define T_TEST_BOOL_TEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_BOOL_TEST, TTestBoolTestClass))

/* struct StructA */
struct _TTestStructA
{ 
  ThriftStruct parent; 

  /* public */
  gchar * s;
};
typedef struct _TTestStructA TTestStructA;

struct _TTestStructAClass
{
  ThriftStructClass parent;
};
typedef struct _TTestStructAClass TTestStructAClass;

GType t_test_struct_a_get_type (void);
#define T_TEST_TYPE_STRUCT_A (t_test_struct_a_get_type())
#define T_TEST_STRUCT_A(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_STRUCT_A, TTestStructA))
#define T_TEST_STRUCT_A_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_STRUCT_A, TTestStructAClass))
#define T_TEST_IS_STRUCT_A(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_STRUCT_A))
#define T_TEST_IS_STRUCT_A_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_STRUCT_A))
#define T_TEST_STRUCT_A_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_STRUCT_A, TTestStructAClass))

/* struct StructB */
struct _TTestStructB
{ 
  ThriftStruct parent; 

  /* public */
  TTestStructA * aa;
  gboolean __isset_aa;
  TTestStructA * ab;
};
typedef struct _TTestStructB TTestStructB;

struct _TTestStructBClass
{
  ThriftStructClass parent;
};
typedef struct _TTestStructBClass TTestStructBClass;

GType t_test_struct_b_get_type (void);
#define T_TEST_TYPE_STRUCT_B (t_test_struct_b_get_type())
#define T_TEST_STRUCT_B(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_STRUCT_B, TTestStructB))
#define T_TEST_STRUCT_B_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_STRUCT_B, TTestStructBClass))
#define T_TEST_IS_STRUCT_B(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_STRUCT_B))
#define T_TEST_IS_STRUCT_B_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_STRUCT_B))
#define T_TEST_STRUCT_B_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_STRUCT_B, TTestStructBClass))

/* constants */
#define T_TEST_MYNUMBERZ (TTestNumberz)1

/* struct ThriftTestTestVoidArgs */
struct _TTestThriftTestTestVoidArgs
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestThriftTestTestVoidArgs TTestThriftTestTestVoidArgs;

struct _TTestThriftTestTestVoidArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestVoidArgsClass TTestThriftTestTestVoidArgsClass;

GType t_test_thrift_test_test_void_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_VOID_ARGS (t_test_thrift_test_test_void_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_VOID_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_VOID_ARGS, TTestThriftTestTestVoidArgs))
#define T_TEST_THRIFT_TEST_TEST_VOID_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_VOID_ARGS, TTestThriftTestTestVoidArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_VOID_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_VOID_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_VOID_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_VOID_ARGS))
#define T_TEST_THRIFT_TEST_TEST_VOID_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_VOID_ARGS, TTestThriftTestTestVoidArgsClass))

/* struct ThriftTestTestVoidResult */
struct _TTestThriftTestTestVoidResult
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestThriftTestTestVoidResult TTestThriftTestTestVoidResult;

struct _TTestThriftTestTestVoidResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestVoidResultClass TTestThriftTestTestVoidResultClass;

GType t_test_thrift_test_test_void_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_VOID_RESULT (t_test_thrift_test_test_void_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_VOID_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_VOID_RESULT, TTestThriftTestTestVoidResult))
#define T_TEST_THRIFT_TEST_TEST_VOID_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_VOID_RESULT, TTestThriftTestTestVoidResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_VOID_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_VOID_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_VOID_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_VOID_RESULT))
#define T_TEST_THRIFT_TEST_TEST_VOID_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_VOID_RESULT, TTestThriftTestTestVoidResultClass))

/* struct ThriftTestTestStringArgs */
struct _TTestThriftTestTestStringArgs
{ 
  ThriftStruct parent; 

  /* public */
  gchar * thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestStringArgs TTestThriftTestTestStringArgs;

struct _TTestThriftTestTestStringArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestStringArgsClass TTestThriftTestTestStringArgsClass;

GType t_test_thrift_test_test_string_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_STRING_ARGS (t_test_thrift_test_test_string_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_STRING_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_ARGS, TTestThriftTestTestStringArgs))
#define T_TEST_THRIFT_TEST_TEST_STRING_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_STRING_ARGS, TTestThriftTestTestStringArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_STRING_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_STRING_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_ARGS))
#define T_TEST_THRIFT_TEST_TEST_STRING_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_ARGS, TTestThriftTestTestStringArgsClass))

/* struct ThriftTestTestStringResult */
struct _TTestThriftTestTestStringResult
{ 
  ThriftStruct parent; 

  /* public */
  gchar * success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestStringResult TTestThriftTestTestStringResult;

struct _TTestThriftTestTestStringResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestStringResultClass TTestThriftTestTestStringResultClass;

GType t_test_thrift_test_test_string_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_STRING_RESULT (t_test_thrift_test_test_string_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_STRING_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_RESULT, TTestThriftTestTestStringResult))
#define T_TEST_THRIFT_TEST_TEST_STRING_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_STRING_RESULT, TTestThriftTestTestStringResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_STRING_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_STRING_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_RESULT))
#define T_TEST_THRIFT_TEST_TEST_STRING_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_RESULT, TTestThriftTestTestStringResultClass))

/* struct ThriftTestTestBoolArgs */
struct _TTestThriftTestTestBoolArgs
{ 
  ThriftStruct parent; 

  /* public */
  gboolean thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestBoolArgs TTestThriftTestTestBoolArgs;

struct _TTestThriftTestTestBoolArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestBoolArgsClass TTestThriftTestTestBoolArgsClass;

GType t_test_thrift_test_test_bool_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_BOOL_ARGS (t_test_thrift_test_test_bool_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_BOOL_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BOOL_ARGS, TTestThriftTestTestBoolArgs))
#define T_TEST_THRIFT_TEST_TEST_BOOL_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_BOOL_ARGS, TTestThriftTestTestBoolArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_BOOL_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BOOL_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_BOOL_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_BOOL_ARGS))
#define T_TEST_THRIFT_TEST_TEST_BOOL_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BOOL_ARGS, TTestThriftTestTestBoolArgsClass))

/* struct ThriftTestTestBoolResult */
struct _TTestThriftTestTestBoolResult
{ 
  ThriftStruct parent; 

  /* public */
  gboolean success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestBoolResult TTestThriftTestTestBoolResult;

struct _TTestThriftTestTestBoolResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestBoolResultClass TTestThriftTestTestBoolResultClass;

GType t_test_thrift_test_test_bool_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_BOOL_RESULT (t_test_thrift_test_test_bool_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_BOOL_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BOOL_RESULT, TTestThriftTestTestBoolResult))
#define T_TEST_THRIFT_TEST_TEST_BOOL_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_BOOL_RESULT, TTestThriftTestTestBoolResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_BOOL_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BOOL_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_BOOL_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_BOOL_RESULT))
#define T_TEST_THRIFT_TEST_TEST_BOOL_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BOOL_RESULT, TTestThriftTestTestBoolResultClass))

/* struct ThriftTestTestByteArgs */
struct _TTestThriftTestTestByteArgs
{ 
  ThriftStruct parent; 

  /* public */
  gint8 thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestByteArgs TTestThriftTestTestByteArgs;

struct _TTestThriftTestTestByteArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestByteArgsClass TTestThriftTestTestByteArgsClass;

GType t_test_thrift_test_test_byte_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_BYTE_ARGS (t_test_thrift_test_test_byte_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_BYTE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BYTE_ARGS, TTestThriftTestTestByteArgs))
#define T_TEST_THRIFT_TEST_TEST_BYTE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_BYTE_ARGS, TTestThriftTestTestByteArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_BYTE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BYTE_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_BYTE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_BYTE_ARGS))
#define T_TEST_THRIFT_TEST_TEST_BYTE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BYTE_ARGS, TTestThriftTestTestByteArgsClass))

/* struct ThriftTestTestByteResult */
struct _TTestThriftTestTestByteResult
{ 
  ThriftStruct parent; 

  /* public */
  gint8 success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestByteResult TTestThriftTestTestByteResult;

struct _TTestThriftTestTestByteResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestByteResultClass TTestThriftTestTestByteResultClass;

GType t_test_thrift_test_test_byte_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_BYTE_RESULT (t_test_thrift_test_test_byte_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_BYTE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BYTE_RESULT, TTestThriftTestTestByteResult))
#define T_TEST_THRIFT_TEST_TEST_BYTE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_BYTE_RESULT, TTestThriftTestTestByteResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_BYTE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BYTE_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_BYTE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_BYTE_RESULT))
#define T_TEST_THRIFT_TEST_TEST_BYTE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BYTE_RESULT, TTestThriftTestTestByteResultClass))

/* struct ThriftTestTestI32Args */
struct _TTestThriftTestTestI32Args
{ 
  ThriftStruct parent; 

  /* public */
  gint32 thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestI32Args TTestThriftTestTestI32Args;

struct _TTestThriftTestTestI32ArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestI32ArgsClass TTestThriftTestTestI32ArgsClass;

GType t_test_thrift_test_test_i32_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_I32_ARGS (t_test_thrift_test_test_i32_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_I32_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_I32_ARGS, TTestThriftTestTestI32Args))
#define T_TEST_THRIFT_TEST_TEST_I32_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_I32_ARGS, TTestThriftTestTestI32ArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_I32_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_I32_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_I32_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_I32_ARGS))
#define T_TEST_THRIFT_TEST_TEST_I32_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_I32_ARGS, TTestThriftTestTestI32ArgsClass))

/* struct ThriftTestTestI32Result */
struct _TTestThriftTestTestI32Result
{ 
  ThriftStruct parent; 

  /* public */
  gint32 success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestI32Result TTestThriftTestTestI32Result;

struct _TTestThriftTestTestI32ResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestI32ResultClass TTestThriftTestTestI32ResultClass;

GType t_test_thrift_test_test_i32_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_I32_RESULT (t_test_thrift_test_test_i32_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_I32_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_I32_RESULT, TTestThriftTestTestI32Result))
#define T_TEST_THRIFT_TEST_TEST_I32_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_I32_RESULT, TTestThriftTestTestI32ResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_I32_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_I32_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_I32_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_I32_RESULT))
#define T_TEST_THRIFT_TEST_TEST_I32_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_I32_RESULT, TTestThriftTestTestI32ResultClass))

/* struct ThriftTestTestI64Args */
struct _TTestThriftTestTestI64Args
{ 
  ThriftStruct parent; 

  /* public */
  gint64 thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestI64Args TTestThriftTestTestI64Args;

struct _TTestThriftTestTestI64ArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestI64ArgsClass TTestThriftTestTestI64ArgsClass;

GType t_test_thrift_test_test_i64_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_I64_ARGS (t_test_thrift_test_test_i64_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_I64_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_I64_ARGS, TTestThriftTestTestI64Args))
#define T_TEST_THRIFT_TEST_TEST_I64_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_I64_ARGS, TTestThriftTestTestI64ArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_I64_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_I64_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_I64_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_I64_ARGS))
#define T_TEST_THRIFT_TEST_TEST_I64_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_I64_ARGS, TTestThriftTestTestI64ArgsClass))

/* struct ThriftTestTestI64Result */
struct _TTestThriftTestTestI64Result
{ 
  ThriftStruct parent; 

  /* public */
  gint64 success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestI64Result TTestThriftTestTestI64Result;

struct _TTestThriftTestTestI64ResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestI64ResultClass TTestThriftTestTestI64ResultClass;

GType t_test_thrift_test_test_i64_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_I64_RESULT (t_test_thrift_test_test_i64_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_I64_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_I64_RESULT, TTestThriftTestTestI64Result))
#define T_TEST_THRIFT_TEST_TEST_I64_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_I64_RESULT, TTestThriftTestTestI64ResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_I64_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_I64_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_I64_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_I64_RESULT))
#define T_TEST_THRIFT_TEST_TEST_I64_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_I64_RESULT, TTestThriftTestTestI64ResultClass))

/* struct ThriftTestTestDoubleArgs */
struct _TTestThriftTestTestDoubleArgs
{ 
  ThriftStruct parent; 

  /* public */
  gdouble thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestDoubleArgs TTestThriftTestTestDoubleArgs;

struct _TTestThriftTestTestDoubleArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestDoubleArgsClass TTestThriftTestTestDoubleArgsClass;

GType t_test_thrift_test_test_double_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_DOUBLE_ARGS (t_test_thrift_test_test_double_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_DOUBLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_DOUBLE_ARGS, TTestThriftTestTestDoubleArgs))
#define T_TEST_THRIFT_TEST_TEST_DOUBLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_DOUBLE_ARGS, TTestThriftTestTestDoubleArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_DOUBLE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_DOUBLE_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_DOUBLE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_DOUBLE_ARGS))
#define T_TEST_THRIFT_TEST_TEST_DOUBLE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_DOUBLE_ARGS, TTestThriftTestTestDoubleArgsClass))

/* struct ThriftTestTestDoubleResult */
struct _TTestThriftTestTestDoubleResult
{ 
  ThriftStruct parent; 

  /* public */
  gdouble success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestDoubleResult TTestThriftTestTestDoubleResult;

struct _TTestThriftTestTestDoubleResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestDoubleResultClass TTestThriftTestTestDoubleResultClass;

GType t_test_thrift_test_test_double_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_DOUBLE_RESULT (t_test_thrift_test_test_double_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_DOUBLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_DOUBLE_RESULT, TTestThriftTestTestDoubleResult))
#define T_TEST_THRIFT_TEST_TEST_DOUBLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_DOUBLE_RESULT, TTestThriftTestTestDoubleResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_DOUBLE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_DOUBLE_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_DOUBLE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_DOUBLE_RESULT))
#define T_TEST_THRIFT_TEST_TEST_DOUBLE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_DOUBLE_RESULT, TTestThriftTestTestDoubleResultClass))

/* struct ThriftTestTestBinaryArgs */
struct _TTestThriftTestTestBinaryArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestBinaryArgs TTestThriftTestTestBinaryArgs;

struct _TTestThriftTestTestBinaryArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestBinaryArgsClass TTestThriftTestTestBinaryArgsClass;

GType t_test_thrift_test_test_binary_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_BINARY_ARGS (t_test_thrift_test_test_binary_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_BINARY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BINARY_ARGS, TTestThriftTestTestBinaryArgs))
#define T_TEST_THRIFT_TEST_TEST_BINARY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_BINARY_ARGS, TTestThriftTestTestBinaryArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_BINARY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BINARY_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_BINARY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_BINARY_ARGS))
#define T_TEST_THRIFT_TEST_TEST_BINARY_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BINARY_ARGS, TTestThriftTestTestBinaryArgsClass))

/* struct ThriftTestTestBinaryResult */
struct _TTestThriftTestTestBinaryResult
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestBinaryResult TTestThriftTestTestBinaryResult;

struct _TTestThriftTestTestBinaryResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestBinaryResultClass TTestThriftTestTestBinaryResultClass;

GType t_test_thrift_test_test_binary_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_BINARY_RESULT (t_test_thrift_test_test_binary_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_BINARY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BINARY_RESULT, TTestThriftTestTestBinaryResult))
#define T_TEST_THRIFT_TEST_TEST_BINARY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_BINARY_RESULT, TTestThriftTestTestBinaryResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_BINARY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BINARY_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_BINARY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_BINARY_RESULT))
#define T_TEST_THRIFT_TEST_TEST_BINARY_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_BINARY_RESULT, TTestThriftTestTestBinaryResultClass))

/* struct ThriftTestTestStructArgs */
struct _TTestThriftTestTestStructArgs
{ 
  ThriftStruct parent; 

  /* public */
  TTestXtruct * thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestStructArgs TTestThriftTestTestStructArgs;

struct _TTestThriftTestTestStructArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestStructArgsClass TTestThriftTestTestStructArgsClass;

GType t_test_thrift_test_test_struct_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_STRUCT_ARGS (t_test_thrift_test_test_struct_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_STRUCT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRUCT_ARGS, TTestThriftTestTestStructArgs))
#define T_TEST_THRIFT_TEST_TEST_STRUCT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_STRUCT_ARGS, TTestThriftTestTestStructArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_STRUCT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRUCT_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_STRUCT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_STRUCT_ARGS))
#define T_TEST_THRIFT_TEST_TEST_STRUCT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRUCT_ARGS, TTestThriftTestTestStructArgsClass))

/* struct ThriftTestTestStructResult */
struct _TTestThriftTestTestStructResult
{ 
  ThriftStruct parent; 

  /* public */
  TTestXtruct * success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestStructResult TTestThriftTestTestStructResult;

struct _TTestThriftTestTestStructResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestStructResultClass TTestThriftTestTestStructResultClass;

GType t_test_thrift_test_test_struct_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_STRUCT_RESULT (t_test_thrift_test_test_struct_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_STRUCT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRUCT_RESULT, TTestThriftTestTestStructResult))
#define T_TEST_THRIFT_TEST_TEST_STRUCT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_STRUCT_RESULT, TTestThriftTestTestStructResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_STRUCT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRUCT_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_STRUCT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_STRUCT_RESULT))
#define T_TEST_THRIFT_TEST_TEST_STRUCT_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRUCT_RESULT, TTestThriftTestTestStructResultClass))

/* struct ThriftTestTestNestArgs */
struct _TTestThriftTestTestNestArgs
{ 
  ThriftStruct parent; 

  /* public */
  TTestXtruct2 * thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestNestArgs TTestThriftTestTestNestArgs;

struct _TTestThriftTestTestNestArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestNestArgsClass TTestThriftTestTestNestArgsClass;

GType t_test_thrift_test_test_nest_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_NEST_ARGS (t_test_thrift_test_test_nest_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_NEST_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_NEST_ARGS, TTestThriftTestTestNestArgs))
#define T_TEST_THRIFT_TEST_TEST_NEST_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_NEST_ARGS, TTestThriftTestTestNestArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_NEST_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_NEST_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_NEST_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_NEST_ARGS))
#define T_TEST_THRIFT_TEST_TEST_NEST_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_NEST_ARGS, TTestThriftTestTestNestArgsClass))

/* struct ThriftTestTestNestResult */
struct _TTestThriftTestTestNestResult
{ 
  ThriftStruct parent; 

  /* public */
  TTestXtruct2 * success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestNestResult TTestThriftTestTestNestResult;

struct _TTestThriftTestTestNestResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestNestResultClass TTestThriftTestTestNestResultClass;

GType t_test_thrift_test_test_nest_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_NEST_RESULT (t_test_thrift_test_test_nest_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_NEST_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_NEST_RESULT, TTestThriftTestTestNestResult))
#define T_TEST_THRIFT_TEST_TEST_NEST_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_NEST_RESULT, TTestThriftTestTestNestResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_NEST_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_NEST_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_NEST_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_NEST_RESULT))
#define T_TEST_THRIFT_TEST_TEST_NEST_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_NEST_RESULT, TTestThriftTestTestNestResultClass))

/* struct ThriftTestTestMapArgs */
struct _TTestThriftTestTestMapArgs
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestMapArgs TTestThriftTestTestMapArgs;

struct _TTestThriftTestTestMapArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestMapArgsClass TTestThriftTestTestMapArgsClass;

GType t_test_thrift_test_test_map_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_MAP_ARGS (t_test_thrift_test_test_map_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_MAP_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_ARGS, TTestThriftTestTestMapArgs))
#define T_TEST_THRIFT_TEST_TEST_MAP_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_MAP_ARGS, TTestThriftTestTestMapArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_MAP_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_MAP_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_ARGS))
#define T_TEST_THRIFT_TEST_TEST_MAP_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_ARGS, TTestThriftTestTestMapArgsClass))

/* struct ThriftTestTestMapResult */
struct _TTestThriftTestTestMapResult
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestMapResult TTestThriftTestTestMapResult;

struct _TTestThriftTestTestMapResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestMapResultClass TTestThriftTestTestMapResultClass;

GType t_test_thrift_test_test_map_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_MAP_RESULT (t_test_thrift_test_test_map_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_MAP_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_RESULT, TTestThriftTestTestMapResult))
#define T_TEST_THRIFT_TEST_TEST_MAP_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_MAP_RESULT, TTestThriftTestTestMapResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_MAP_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_MAP_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_RESULT))
#define T_TEST_THRIFT_TEST_TEST_MAP_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_RESULT, TTestThriftTestTestMapResultClass))

/* struct ThriftTestTestStringMapArgs */
struct _TTestThriftTestTestStringMapArgs
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestStringMapArgs TTestThriftTestTestStringMapArgs;

struct _TTestThriftTestTestStringMapArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestStringMapArgsClass TTestThriftTestTestStringMapArgsClass;

GType t_test_thrift_test_test_string_map_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_STRING_MAP_ARGS (t_test_thrift_test_test_string_map_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_STRING_MAP_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_MAP_ARGS, TTestThriftTestTestStringMapArgs))
#define T_TEST_THRIFT_TEST_TEST_STRING_MAP_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_STRING_MAP_ARGS, TTestThriftTestTestStringMapArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_STRING_MAP_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_MAP_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_STRING_MAP_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_MAP_ARGS))
#define T_TEST_THRIFT_TEST_TEST_STRING_MAP_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_MAP_ARGS, TTestThriftTestTestStringMapArgsClass))

/* struct ThriftTestTestStringMapResult */
struct _TTestThriftTestTestStringMapResult
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestStringMapResult TTestThriftTestTestStringMapResult;

struct _TTestThriftTestTestStringMapResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestStringMapResultClass TTestThriftTestTestStringMapResultClass;

GType t_test_thrift_test_test_string_map_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_STRING_MAP_RESULT (t_test_thrift_test_test_string_map_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_STRING_MAP_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_MAP_RESULT, TTestThriftTestTestStringMapResult))
#define T_TEST_THRIFT_TEST_TEST_STRING_MAP_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_STRING_MAP_RESULT, TTestThriftTestTestStringMapResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_STRING_MAP_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_MAP_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_STRING_MAP_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_MAP_RESULT))
#define T_TEST_THRIFT_TEST_TEST_STRING_MAP_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_STRING_MAP_RESULT, TTestThriftTestTestStringMapResultClass))

/* struct ThriftTestTestSetArgs */
struct _TTestThriftTestTestSetArgs
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestSetArgs TTestThriftTestTestSetArgs;

struct _TTestThriftTestTestSetArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestSetArgsClass TTestThriftTestTestSetArgsClass;

GType t_test_thrift_test_test_set_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_SET_ARGS (t_test_thrift_test_test_set_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_SET_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_SET_ARGS, TTestThriftTestTestSetArgs))
#define T_TEST_THRIFT_TEST_TEST_SET_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_SET_ARGS, TTestThriftTestTestSetArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_SET_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_SET_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_SET_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_SET_ARGS))
#define T_TEST_THRIFT_TEST_TEST_SET_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_SET_ARGS, TTestThriftTestTestSetArgsClass))

/* struct ThriftTestTestSetResult */
struct _TTestThriftTestTestSetResult
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestSetResult TTestThriftTestTestSetResult;

struct _TTestThriftTestTestSetResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestSetResultClass TTestThriftTestTestSetResultClass;

GType t_test_thrift_test_test_set_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_SET_RESULT (t_test_thrift_test_test_set_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_SET_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_SET_RESULT, TTestThriftTestTestSetResult))
#define T_TEST_THRIFT_TEST_TEST_SET_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_SET_RESULT, TTestThriftTestTestSetResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_SET_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_SET_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_SET_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_SET_RESULT))
#define T_TEST_THRIFT_TEST_TEST_SET_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_SET_RESULT, TTestThriftTestTestSetResultClass))

/* struct ThriftTestTestListArgs */
struct _TTestThriftTestTestListArgs
{ 
  ThriftStruct parent; 

  /* public */
  GArray * thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestListArgs TTestThriftTestTestListArgs;

struct _TTestThriftTestTestListArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestListArgsClass TTestThriftTestTestListArgsClass;

GType t_test_thrift_test_test_list_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_LIST_ARGS (t_test_thrift_test_test_list_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_LIST_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_LIST_ARGS, TTestThriftTestTestListArgs))
#define T_TEST_THRIFT_TEST_TEST_LIST_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_LIST_ARGS, TTestThriftTestTestListArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_LIST_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_LIST_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_LIST_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_LIST_ARGS))
#define T_TEST_THRIFT_TEST_TEST_LIST_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_LIST_ARGS, TTestThriftTestTestListArgsClass))

/* struct ThriftTestTestListResult */
struct _TTestThriftTestTestListResult
{ 
  ThriftStruct parent; 

  /* public */
  GArray * success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestListResult TTestThriftTestTestListResult;

struct _TTestThriftTestTestListResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestListResultClass TTestThriftTestTestListResultClass;

GType t_test_thrift_test_test_list_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_LIST_RESULT (t_test_thrift_test_test_list_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_LIST_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_LIST_RESULT, TTestThriftTestTestListResult))
#define T_TEST_THRIFT_TEST_TEST_LIST_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_LIST_RESULT, TTestThriftTestTestListResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_LIST_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_LIST_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_LIST_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_LIST_RESULT))
#define T_TEST_THRIFT_TEST_TEST_LIST_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_LIST_RESULT, TTestThriftTestTestListResultClass))

/* struct ThriftTestTestEnumArgs */
struct _TTestThriftTestTestEnumArgs
{ 
  ThriftStruct parent; 

  /* public */
  TTestNumberz thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestEnumArgs TTestThriftTestTestEnumArgs;

struct _TTestThriftTestTestEnumArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestEnumArgsClass TTestThriftTestTestEnumArgsClass;

GType t_test_thrift_test_test_enum_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_ENUM_ARGS (t_test_thrift_test_test_enum_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_ENUM_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_ENUM_ARGS, TTestThriftTestTestEnumArgs))
#define T_TEST_THRIFT_TEST_TEST_ENUM_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_ENUM_ARGS, TTestThriftTestTestEnumArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_ENUM_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_ENUM_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_ENUM_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_ENUM_ARGS))
#define T_TEST_THRIFT_TEST_TEST_ENUM_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_ENUM_ARGS, TTestThriftTestTestEnumArgsClass))

/* struct ThriftTestTestEnumResult */
struct _TTestThriftTestTestEnumResult
{ 
  ThriftStruct parent; 

  /* public */
  TTestNumberz success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestEnumResult TTestThriftTestTestEnumResult;

struct _TTestThriftTestTestEnumResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestEnumResultClass TTestThriftTestTestEnumResultClass;

GType t_test_thrift_test_test_enum_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_ENUM_RESULT (t_test_thrift_test_test_enum_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_ENUM_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_ENUM_RESULT, TTestThriftTestTestEnumResult))
#define T_TEST_THRIFT_TEST_TEST_ENUM_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_ENUM_RESULT, TTestThriftTestTestEnumResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_ENUM_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_ENUM_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_ENUM_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_ENUM_RESULT))
#define T_TEST_THRIFT_TEST_TEST_ENUM_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_ENUM_RESULT, TTestThriftTestTestEnumResultClass))

/* struct ThriftTestTestTypedefArgs */
struct _TTestThriftTestTestTypedefArgs
{ 
  ThriftStruct parent; 

  /* public */
  gint64 thing;
  gboolean __isset_thing;
};
typedef struct _TTestThriftTestTestTypedefArgs TTestThriftTestTestTypedefArgs;

struct _TTestThriftTestTestTypedefArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestTypedefArgsClass TTestThriftTestTestTypedefArgsClass;

GType t_test_thrift_test_test_typedef_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_TYPEDEF_ARGS (t_test_thrift_test_test_typedef_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_TYPEDEF_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_TYPEDEF_ARGS, TTestThriftTestTestTypedefArgs))
#define T_TEST_THRIFT_TEST_TEST_TYPEDEF_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_TYPEDEF_ARGS, TTestThriftTestTestTypedefArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_TYPEDEF_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_TYPEDEF_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_TYPEDEF_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_TYPEDEF_ARGS))
#define T_TEST_THRIFT_TEST_TEST_TYPEDEF_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_TYPEDEF_ARGS, TTestThriftTestTestTypedefArgsClass))

/* struct ThriftTestTestTypedefResult */
struct _TTestThriftTestTestTypedefResult
{ 
  ThriftStruct parent; 

  /* public */
  gint64 success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestTypedefResult TTestThriftTestTestTypedefResult;

struct _TTestThriftTestTestTypedefResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestTypedefResultClass TTestThriftTestTestTypedefResultClass;

GType t_test_thrift_test_test_typedef_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_TYPEDEF_RESULT (t_test_thrift_test_test_typedef_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_TYPEDEF_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_TYPEDEF_RESULT, TTestThriftTestTestTypedefResult))
#define T_TEST_THRIFT_TEST_TEST_TYPEDEF_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_TYPEDEF_RESULT, TTestThriftTestTestTypedefResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_TYPEDEF_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_TYPEDEF_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_TYPEDEF_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_TYPEDEF_RESULT))
#define T_TEST_THRIFT_TEST_TEST_TYPEDEF_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_TYPEDEF_RESULT, TTestThriftTestTestTypedefResultClass))

/* struct ThriftTestTestMapMapArgs */
struct _TTestThriftTestTestMapMapArgs
{ 
  ThriftStruct parent; 

  /* public */
  gint32 hello;
  gboolean __isset_hello;
};
typedef struct _TTestThriftTestTestMapMapArgs TTestThriftTestTestMapMapArgs;

struct _TTestThriftTestTestMapMapArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestMapMapArgsClass TTestThriftTestTestMapMapArgsClass;

GType t_test_thrift_test_test_map_map_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_MAP_MAP_ARGS (t_test_thrift_test_test_map_map_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_MAP_MAP_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_MAP_ARGS, TTestThriftTestTestMapMapArgs))
#define T_TEST_THRIFT_TEST_TEST_MAP_MAP_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_MAP_MAP_ARGS, TTestThriftTestTestMapMapArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_MAP_MAP_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_MAP_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_MAP_MAP_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_MAP_ARGS))
#define T_TEST_THRIFT_TEST_TEST_MAP_MAP_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_MAP_ARGS, TTestThriftTestTestMapMapArgsClass))

/* struct ThriftTestTestMapMapResult */
struct _TTestThriftTestTestMapMapResult
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestMapMapResult TTestThriftTestTestMapMapResult;

struct _TTestThriftTestTestMapMapResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestMapMapResultClass TTestThriftTestTestMapMapResultClass;

GType t_test_thrift_test_test_map_map_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_MAP_MAP_RESULT (t_test_thrift_test_test_map_map_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_MAP_MAP_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_MAP_RESULT, TTestThriftTestTestMapMapResult))
#define T_TEST_THRIFT_TEST_TEST_MAP_MAP_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_MAP_MAP_RESULT, TTestThriftTestTestMapMapResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_MAP_MAP_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_MAP_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_MAP_MAP_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_MAP_RESULT))
#define T_TEST_THRIFT_TEST_TEST_MAP_MAP_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MAP_MAP_RESULT, TTestThriftTestTestMapMapResultClass))

/* struct ThriftTestTestInsanityArgs */
struct _TTestThriftTestTestInsanityArgs
{ 
  ThriftStruct parent; 

  /* public */
  TTestInsanity * argument;
  gboolean __isset_argument;
};
typedef struct _TTestThriftTestTestInsanityArgs TTestThriftTestTestInsanityArgs;

struct _TTestThriftTestTestInsanityArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestInsanityArgsClass TTestThriftTestTestInsanityArgsClass;

GType t_test_thrift_test_test_insanity_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_INSANITY_ARGS (t_test_thrift_test_test_insanity_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_INSANITY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_INSANITY_ARGS, TTestThriftTestTestInsanityArgs))
#define T_TEST_THRIFT_TEST_TEST_INSANITY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_INSANITY_ARGS, TTestThriftTestTestInsanityArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_INSANITY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_INSANITY_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_INSANITY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_INSANITY_ARGS))
#define T_TEST_THRIFT_TEST_TEST_INSANITY_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_INSANITY_ARGS, TTestThriftTestTestInsanityArgsClass))

/* struct ThriftTestTestInsanityResult */
struct _TTestThriftTestTestInsanityResult
{ 
  ThriftStruct parent; 

  /* public */
  GHashTable * success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestInsanityResult TTestThriftTestTestInsanityResult;

struct _TTestThriftTestTestInsanityResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestInsanityResultClass TTestThriftTestTestInsanityResultClass;

GType t_test_thrift_test_test_insanity_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_INSANITY_RESULT (t_test_thrift_test_test_insanity_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_INSANITY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_INSANITY_RESULT, TTestThriftTestTestInsanityResult))
#define T_TEST_THRIFT_TEST_TEST_INSANITY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_INSANITY_RESULT, TTestThriftTestTestInsanityResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_INSANITY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_INSANITY_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_INSANITY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_INSANITY_RESULT))
#define T_TEST_THRIFT_TEST_TEST_INSANITY_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_INSANITY_RESULT, TTestThriftTestTestInsanityResultClass))

/* struct ThriftTestTestMultiArgs */
struct _TTestThriftTestTestMultiArgs
{ 
  ThriftStruct parent; 

  /* public */
  gint8 arg0;
  gboolean __isset_arg0;
  gint32 arg1;
  gboolean __isset_arg1;
  gint64 arg2;
  gboolean __isset_arg2;
  GHashTable * arg3;
  gboolean __isset_arg3;
  TTestNumberz arg4;
  gboolean __isset_arg4;
  gint64 arg5;
  gboolean __isset_arg5;
};
typedef struct _TTestThriftTestTestMultiArgs TTestThriftTestTestMultiArgs;

struct _TTestThriftTestTestMultiArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestMultiArgsClass TTestThriftTestTestMultiArgsClass;

GType t_test_thrift_test_test_multi_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_ARGS (t_test_thrift_test_test_multi_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_MULTI_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_ARGS, TTestThriftTestTestMultiArgs))
#define T_TEST_THRIFT_TEST_TEST_MULTI_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_MULTI_ARGS, TTestThriftTestTestMultiArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_MULTI_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_MULTI_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_ARGS))
#define T_TEST_THRIFT_TEST_TEST_MULTI_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_ARGS, TTestThriftTestTestMultiArgsClass))

/* struct ThriftTestTestMultiResult */
struct _TTestThriftTestTestMultiResult
{ 
  ThriftStruct parent; 

  /* public */
  TTestXtruct * success;
  gboolean __isset_success;
};
typedef struct _TTestThriftTestTestMultiResult TTestThriftTestTestMultiResult;

struct _TTestThriftTestTestMultiResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestMultiResultClass TTestThriftTestTestMultiResultClass;

GType t_test_thrift_test_test_multi_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_RESULT (t_test_thrift_test_test_multi_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_MULTI_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_RESULT, TTestThriftTestTestMultiResult))
#define T_TEST_THRIFT_TEST_TEST_MULTI_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_MULTI_RESULT, TTestThriftTestTestMultiResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_MULTI_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_MULTI_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_RESULT))
#define T_TEST_THRIFT_TEST_TEST_MULTI_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_RESULT, TTestThriftTestTestMultiResultClass))

/* struct ThriftTestTestExceptionArgs */
struct _TTestThriftTestTestExceptionArgs
{ 
  ThriftStruct parent; 

  /* public */
  gchar * arg;
  gboolean __isset_arg;
};
typedef struct _TTestThriftTestTestExceptionArgs TTestThriftTestTestExceptionArgs;

struct _TTestThriftTestTestExceptionArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestExceptionArgsClass TTestThriftTestTestExceptionArgsClass;

GType t_test_thrift_test_test_exception_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_EXCEPTION_ARGS (t_test_thrift_test_test_exception_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_EXCEPTION_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_EXCEPTION_ARGS, TTestThriftTestTestExceptionArgs))
#define T_TEST_THRIFT_TEST_TEST_EXCEPTION_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_EXCEPTION_ARGS, TTestThriftTestTestExceptionArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_EXCEPTION_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_EXCEPTION_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_EXCEPTION_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_EXCEPTION_ARGS))
#define T_TEST_THRIFT_TEST_TEST_EXCEPTION_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_EXCEPTION_ARGS, TTestThriftTestTestExceptionArgsClass))

/* struct ThriftTestTestExceptionResult */
struct _TTestThriftTestTestExceptionResult
{ 
  ThriftStruct parent; 

  /* public */
  TTestXception * err1;
  gboolean __isset_err1;
};
typedef struct _TTestThriftTestTestExceptionResult TTestThriftTestTestExceptionResult;

struct _TTestThriftTestTestExceptionResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestExceptionResultClass TTestThriftTestTestExceptionResultClass;

GType t_test_thrift_test_test_exception_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_EXCEPTION_RESULT (t_test_thrift_test_test_exception_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_EXCEPTION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_EXCEPTION_RESULT, TTestThriftTestTestExceptionResult))
#define T_TEST_THRIFT_TEST_TEST_EXCEPTION_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_EXCEPTION_RESULT, TTestThriftTestTestExceptionResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_EXCEPTION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_EXCEPTION_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_EXCEPTION_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_EXCEPTION_RESULT))
#define T_TEST_THRIFT_TEST_TEST_EXCEPTION_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_EXCEPTION_RESULT, TTestThriftTestTestExceptionResultClass))

/* struct ThriftTestTestMultiExceptionArgs */
struct _TTestThriftTestTestMultiExceptionArgs
{ 
  ThriftStruct parent; 

  /* public */
  gchar * arg0;
  gboolean __isset_arg0;
  gchar * arg1;
  gboolean __isset_arg1;
};
typedef struct _TTestThriftTestTestMultiExceptionArgs TTestThriftTestTestMultiExceptionArgs;

struct _TTestThriftTestTestMultiExceptionArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestMultiExceptionArgsClass TTestThriftTestTestMultiExceptionArgsClass;

GType t_test_thrift_test_test_multi_exception_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_EXCEPTION_ARGS (t_test_thrift_test_test_multi_exception_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_MULTI_EXCEPTION_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_EXCEPTION_ARGS, TTestThriftTestTestMultiExceptionArgs))
#define T_TEST_THRIFT_TEST_TEST_MULTI_EXCEPTION_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_MULTI_EXCEPTION_ARGS, TTestThriftTestTestMultiExceptionArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_MULTI_EXCEPTION_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_EXCEPTION_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_MULTI_EXCEPTION_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_EXCEPTION_ARGS))
#define T_TEST_THRIFT_TEST_TEST_MULTI_EXCEPTION_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_EXCEPTION_ARGS, TTestThriftTestTestMultiExceptionArgsClass))

/* struct ThriftTestTestMultiExceptionResult */
struct _TTestThriftTestTestMultiExceptionResult
{ 
  ThriftStruct parent; 

  /* public */
  TTestXtruct * success;
  gboolean __isset_success;
  TTestXception * err1;
  gboolean __isset_err1;
  TTestXception2 * err2;
  gboolean __isset_err2;
};
typedef struct _TTestThriftTestTestMultiExceptionResult TTestThriftTestTestMultiExceptionResult;

struct _TTestThriftTestTestMultiExceptionResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestMultiExceptionResultClass TTestThriftTestTestMultiExceptionResultClass;

GType t_test_thrift_test_test_multi_exception_result_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_EXCEPTION_RESULT (t_test_thrift_test_test_multi_exception_result_get_type())
#define T_TEST_THRIFT_TEST_TEST_MULTI_EXCEPTION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_EXCEPTION_RESULT, TTestThriftTestTestMultiExceptionResult))
#define T_TEST_THRIFT_TEST_TEST_MULTI_EXCEPTION_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_MULTI_EXCEPTION_RESULT, TTestThriftTestTestMultiExceptionResultClass))
#define T_TEST_IS_THRIFT_TEST_TEST_MULTI_EXCEPTION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_EXCEPTION_RESULT))
#define T_TEST_IS_THRIFT_TEST_TEST_MULTI_EXCEPTION_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_EXCEPTION_RESULT))
#define T_TEST_THRIFT_TEST_TEST_MULTI_EXCEPTION_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_MULTI_EXCEPTION_RESULT, TTestThriftTestTestMultiExceptionResultClass))

/* struct ThriftTestTestOnewayArgs */
struct _TTestThriftTestTestOnewayArgs
{ 
  ThriftStruct parent; 

  /* public */
  gint32 secondsToSleep;
  gboolean __isset_secondsToSleep;
};
typedef struct _TTestThriftTestTestOnewayArgs TTestThriftTestTestOnewayArgs;

struct _TTestThriftTestTestOnewayArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestThriftTestTestOnewayArgsClass TTestThriftTestTestOnewayArgsClass;

GType t_test_thrift_test_test_oneway_args_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_TEST_ONEWAY_ARGS (t_test_thrift_test_test_oneway_args_get_type())
#define T_TEST_THRIFT_TEST_TEST_ONEWAY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_ONEWAY_ARGS, TTestThriftTestTestOnewayArgs))
#define T_TEST_THRIFT_TEST_TEST_ONEWAY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_THRIFT_TEST_TEST_ONEWAY_ARGS, TTestThriftTestTestOnewayArgsClass))
#define T_TEST_IS_THRIFT_TEST_TEST_ONEWAY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_ONEWAY_ARGS))
#define T_TEST_IS_THRIFT_TEST_TEST_ONEWAY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_TEST_ONEWAY_ARGS))
#define T_TEST_THRIFT_TEST_TEST_ONEWAY_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_TEST_ONEWAY_ARGS, TTestThriftTestTestOnewayArgsClass))

/* struct SecondServiceBlahBlahArgs */
struct _TTestSecondServiceBlahBlahArgs
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestSecondServiceBlahBlahArgs TTestSecondServiceBlahBlahArgs;

struct _TTestSecondServiceBlahBlahArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSecondServiceBlahBlahArgsClass TTestSecondServiceBlahBlahArgsClass;

GType t_test_second_service_blah_blah_args_get_type (void);
#define T_TEST_TYPE_SECOND_SERVICE_BLAH_BLAH_ARGS (t_test_second_service_blah_blah_args_get_type())
#define T_TEST_SECOND_SERVICE_BLAH_BLAH_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SECOND_SERVICE_BLAH_BLAH_ARGS, TTestSecondServiceBlahBlahArgs))
#define T_TEST_SECOND_SERVICE_BLAH_BLAH_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SECOND_SERVICE_BLAH_BLAH_ARGS, TTestSecondServiceBlahBlahArgsClass))
#define T_TEST_IS_SECOND_SERVICE_BLAH_BLAH_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SECOND_SERVICE_BLAH_BLAH_ARGS))
#define T_TEST_IS_SECOND_SERVICE_BLAH_BLAH_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SECOND_SERVICE_BLAH_BLAH_ARGS))
#define T_TEST_SECOND_SERVICE_BLAH_BLAH_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SECOND_SERVICE_BLAH_BLAH_ARGS, TTestSecondServiceBlahBlahArgsClass))

/* struct SecondServiceBlahBlahResult */
struct _TTestSecondServiceBlahBlahResult
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _TTestSecondServiceBlahBlahResult TTestSecondServiceBlahBlahResult;

struct _TTestSecondServiceBlahBlahResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSecondServiceBlahBlahResultClass TTestSecondServiceBlahBlahResultClass;

GType t_test_second_service_blah_blah_result_get_type (void);
#define T_TEST_TYPE_SECOND_SERVICE_BLAH_BLAH_RESULT (t_test_second_service_blah_blah_result_get_type())
#define T_TEST_SECOND_SERVICE_BLAH_BLAH_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SECOND_SERVICE_BLAH_BLAH_RESULT, TTestSecondServiceBlahBlahResult))
#define T_TEST_SECOND_SERVICE_BLAH_BLAH_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SECOND_SERVICE_BLAH_BLAH_RESULT, TTestSecondServiceBlahBlahResultClass))
#define T_TEST_IS_SECOND_SERVICE_BLAH_BLAH_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SECOND_SERVICE_BLAH_BLAH_RESULT))
#define T_TEST_IS_SECOND_SERVICE_BLAH_BLAH_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SECOND_SERVICE_BLAH_BLAH_RESULT))
#define T_TEST_SECOND_SERVICE_BLAH_BLAH_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SECOND_SERVICE_BLAH_BLAH_RESULT, TTestSecondServiceBlahBlahResultClass))

/* struct SecondServiceSecondtestStringArgs */
struct _TTestSecondServiceSecondtestStringArgs
{ 
  ThriftStruct parent; 

  /* public */
  gchar * thing;
  gboolean __isset_thing;
};
typedef struct _TTestSecondServiceSecondtestStringArgs TTestSecondServiceSecondtestStringArgs;

struct _TTestSecondServiceSecondtestStringArgsClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSecondServiceSecondtestStringArgsClass TTestSecondServiceSecondtestStringArgsClass;

GType t_test_second_service_secondtest_string_args_get_type (void);
#define T_TEST_TYPE_SECOND_SERVICE_SECONDTEST_STRING_ARGS (t_test_second_service_secondtest_string_args_get_type())
#define T_TEST_SECOND_SERVICE_SECONDTEST_STRING_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SECOND_SERVICE_SECONDTEST_STRING_ARGS, TTestSecondServiceSecondtestStringArgs))
#define T_TEST_SECOND_SERVICE_SECONDTEST_STRING_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SECOND_SERVICE_SECONDTEST_STRING_ARGS, TTestSecondServiceSecondtestStringArgsClass))
#define T_TEST_IS_SECOND_SERVICE_SECONDTEST_STRING_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SECOND_SERVICE_SECONDTEST_STRING_ARGS))
#define T_TEST_IS_SECOND_SERVICE_SECONDTEST_STRING_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SECOND_SERVICE_SECONDTEST_STRING_ARGS))
#define T_TEST_SECOND_SERVICE_SECONDTEST_STRING_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SECOND_SERVICE_SECONDTEST_STRING_ARGS, TTestSecondServiceSecondtestStringArgsClass))

/* struct SecondServiceSecondtestStringResult */
struct _TTestSecondServiceSecondtestStringResult
{ 
  ThriftStruct parent; 

  /* public */
  gchar * success;
  gboolean __isset_success;
};
typedef struct _TTestSecondServiceSecondtestStringResult TTestSecondServiceSecondtestStringResult;

struct _TTestSecondServiceSecondtestStringResultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSecondServiceSecondtestStringResultClass TTestSecondServiceSecondtestStringResultClass;

GType t_test_second_service_secondtest_string_result_get_type (void);
#define T_TEST_TYPE_SECOND_SERVICE_SECONDTEST_STRING_RESULT (t_test_second_service_secondtest_string_result_get_type())
#define T_TEST_SECOND_SERVICE_SECONDTEST_STRING_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SECOND_SERVICE_SECONDTEST_STRING_RESULT, TTestSecondServiceSecondtestStringResult))
#define T_TEST_SECOND_SERVICE_SECONDTEST_STRING_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SECOND_SERVICE_SECONDTEST_STRING_RESULT, TTestSecondServiceSecondtestStringResultClass))
#define T_TEST_IS_SECOND_SERVICE_SECONDTEST_STRING_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SECOND_SERVICE_SECONDTEST_STRING_RESULT))
#define T_TEST_IS_SECOND_SERVICE_SECONDTEST_STRING_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SECOND_SERVICE_SECONDTEST_STRING_RESULT))
#define T_TEST_SECOND_SERVICE_SECONDTEST_STRING_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SECOND_SERVICE_SECONDTEST_STRING_RESULT, TTestSecondServiceSecondtestStringResultClass))

#endif /* T_TEST_THRIFT_TEST_TYPES_H */
