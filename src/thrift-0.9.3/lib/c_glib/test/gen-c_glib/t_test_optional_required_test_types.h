/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef T_TEST_OPTIONAL_REQUIRED_TEST_TYPES_H
#define T_TEST_OPTIONAL_REQUIRED_TEST_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>

/* custom thrift includes */

/* begin types */

/* struct OldSchool */
struct _TTestOldSchool
{ 
  ThriftStruct parent; 

  /* public */
  gint16 im_int;
  gboolean __isset_im_int;
  gchar * im_str;
  gboolean __isset_im_str;
  GPtrArray * im_big;
  gboolean __isset_im_big;
};
typedef struct _TTestOldSchool TTestOldSchool;

struct _TTestOldSchoolClass
{
  ThriftStructClass parent;
};
typedef struct _TTestOldSchoolClass TTestOldSchoolClass;

GType t_test_old_school_get_type (void);
#define T_TEST_TYPE_OLD_SCHOOL (t_test_old_school_get_type())
#define T_TEST_OLD_SCHOOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_OLD_SCHOOL, TTestOldSchool))
#define T_TEST_OLD_SCHOOL_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_OLD_SCHOOL, TTestOldSchoolClass))
#define T_TEST_IS_OLD_SCHOOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_OLD_SCHOOL))
#define T_TEST_IS_OLD_SCHOOL_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_OLD_SCHOOL))
#define T_TEST_OLD_SCHOOL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_OLD_SCHOOL, TTestOldSchoolClass))

/* struct Simple */
struct _TTestSimple
{ 
  ThriftStruct parent; 

  /* public */
  gint16 im_default;
  gboolean __isset_im_default;
  gint16 im_required;
  gint16 im_optional;
  gboolean __isset_im_optional;
};
typedef struct _TTestSimple TTestSimple;

struct _TTestSimpleClass
{
  ThriftStructClass parent;
};
typedef struct _TTestSimpleClass TTestSimpleClass;

GType t_test_simple_get_type (void);
#define T_TEST_TYPE_SIMPLE (t_test_simple_get_type())
#define T_TEST_SIMPLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_SIMPLE, TTestSimple))
#define T_TEST_SIMPLE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_SIMPLE, TTestSimpleClass))
#define T_TEST_IS_SIMPLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_SIMPLE))
#define T_TEST_IS_SIMPLE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_SIMPLE))
#define T_TEST_SIMPLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_SIMPLE, TTestSimpleClass))

/* struct Tricky1 */
struct _TTestTricky1
{ 
  ThriftStruct parent; 

  /* public */
  gint16 im_default;
  gboolean __isset_im_default;
};
typedef struct _TTestTricky1 TTestTricky1;

struct _TTestTricky1Class
{
  ThriftStructClass parent;
};
typedef struct _TTestTricky1Class TTestTricky1Class;

GType t_test_tricky1_get_type (void);
#define T_TEST_TYPE_TRICKY1 (t_test_tricky1_get_type())
#define T_TEST_TRICKY1(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_TRICKY1, TTestTricky1))
#define T_TEST_TRICKY1_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_TRICKY1, TTestTricky1Class))
#define T_TEST_IS_TRICKY1(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_TRICKY1))
#define T_TEST_IS_TRICKY1_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_TRICKY1))
#define T_TEST_TRICKY1_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_TRICKY1, TTestTricky1Class))

/* struct Tricky2 */
struct _TTestTricky2
{ 
  ThriftStruct parent; 

  /* public */
  gint16 im_optional;
  gboolean __isset_im_optional;
};
typedef struct _TTestTricky2 TTestTricky2;

struct _TTestTricky2Class
{
  ThriftStructClass parent;
};
typedef struct _TTestTricky2Class TTestTricky2Class;

GType t_test_tricky2_get_type (void);
#define T_TEST_TYPE_TRICKY2 (t_test_tricky2_get_type())
#define T_TEST_TRICKY2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_TRICKY2, TTestTricky2))
#define T_TEST_TRICKY2_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_TRICKY2, TTestTricky2Class))
#define T_TEST_IS_TRICKY2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_TRICKY2))
#define T_TEST_IS_TRICKY2_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_TRICKY2))
#define T_TEST_TRICKY2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_TRICKY2, TTestTricky2Class))

/* struct Tricky3 */
struct _TTestTricky3
{ 
  ThriftStruct parent; 

  /* public */
  gint16 im_required;
};
typedef struct _TTestTricky3 TTestTricky3;

struct _TTestTricky3Class
{
  ThriftStructClass parent;
};
typedef struct _TTestTricky3Class TTestTricky3Class;

GType t_test_tricky3_get_type (void);
#define T_TEST_TYPE_TRICKY3 (t_test_tricky3_get_type())
#define T_TEST_TRICKY3(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_TRICKY3, TTestTricky3))
#define T_TEST_TRICKY3_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_TRICKY3, TTestTricky3Class))
#define T_TEST_IS_TRICKY3(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_TRICKY3))
#define T_TEST_IS_TRICKY3_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_TRICKY3))
#define T_TEST_TRICKY3_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_TRICKY3, TTestTricky3Class))

/* struct OptionalDefault */
struct _TTestOptionalDefault
{ 
  ThriftStruct parent; 

  /* public */
  gint16 opt_int;
  gboolean __isset_opt_int;
  gchar * opt_str;
  gboolean __isset_opt_str;
};
typedef struct _TTestOptionalDefault TTestOptionalDefault;

struct _TTestOptionalDefaultClass
{
  ThriftStructClass parent;
};
typedef struct _TTestOptionalDefaultClass TTestOptionalDefaultClass;

GType t_test_optional_default_get_type (void);
#define T_TEST_TYPE_OPTIONAL_DEFAULT (t_test_optional_default_get_type())
#define T_TEST_OPTIONAL_DEFAULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_OPTIONAL_DEFAULT, TTestOptionalDefault))
#define T_TEST_OPTIONAL_DEFAULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_OPTIONAL_DEFAULT, TTestOptionalDefaultClass))
#define T_TEST_IS_OPTIONAL_DEFAULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_OPTIONAL_DEFAULT))
#define T_TEST_IS_OPTIONAL_DEFAULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_OPTIONAL_DEFAULT))
#define T_TEST_OPTIONAL_DEFAULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_OPTIONAL_DEFAULT, TTestOptionalDefaultClass))

/* struct Complex */
struct _TTestComplex
{ 
  ThriftStruct parent; 

  /* public */
  gint16 cp_default;
  gboolean __isset_cp_default;
  gint16 cp_required;
  gint16 cp_optional;
  gboolean __isset_cp_optional;
  GHashTable * the_map;
  gboolean __isset_the_map;
  TTestSimple * req_simp;
  TTestSimple * opt_simp;
  gboolean __isset_opt_simp;
};
typedef struct _TTestComplex TTestComplex;

struct _TTestComplexClass
{
  ThriftStructClass parent;
};
typedef struct _TTestComplexClass TTestComplexClass;

GType t_test_complex_get_type (void);
#define T_TEST_TYPE_COMPLEX (t_test_complex_get_type())
#define T_TEST_COMPLEX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_COMPLEX, TTestComplex))
#define T_TEST_COMPLEX_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_COMPLEX, TTestComplexClass))
#define T_TEST_IS_COMPLEX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_COMPLEX))
#define T_TEST_IS_COMPLEX_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_COMPLEX))
#define T_TEST_COMPLEX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_COMPLEX, TTestComplexClass))

/* struct ManyOpt */
struct _TTestManyOpt
{ 
  ThriftStruct parent; 

  /* public */
  gint32 opt1;
  gboolean __isset_opt1;
  gint32 opt2;
  gboolean __isset_opt2;
  gint32 opt3;
  gboolean __isset_opt3;
  gint32 def4;
  gboolean __isset_def4;
  gint32 opt5;
  gboolean __isset_opt5;
  gint32 opt6;
  gboolean __isset_opt6;
};
typedef struct _TTestManyOpt TTestManyOpt;

struct _TTestManyOptClass
{
  ThriftStructClass parent;
};
typedef struct _TTestManyOptClass TTestManyOptClass;

GType t_test_many_opt_get_type (void);
#define T_TEST_TYPE_MANY_OPT (t_test_many_opt_get_type())
#define T_TEST_MANY_OPT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_MANY_OPT, TTestManyOpt))
#define T_TEST_MANY_OPT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_MANY_OPT, TTestManyOptClass))
#define T_TEST_IS_MANY_OPT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_MANY_OPT))
#define T_TEST_IS_MANY_OPT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_MANY_OPT))
#define T_TEST_MANY_OPT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_MANY_OPT, TTestManyOptClass))

/* struct JavaTestHelper */
struct _TTestJavaTestHelper
{ 
  ThriftStruct parent; 

  /* public */
  gint32 req_int;
  gint32 opt_int;
  gboolean __isset_opt_int;
  gchar * req_obj;
  gchar * opt_obj;
  gboolean __isset_opt_obj;
  GByteArray * req_bin;
  GByteArray * opt_bin;
  gboolean __isset_opt_bin;
};
typedef struct _TTestJavaTestHelper TTestJavaTestHelper;

struct _TTestJavaTestHelperClass
{
  ThriftStructClass parent;
};
typedef struct _TTestJavaTestHelperClass TTestJavaTestHelperClass;

GType t_test_java_test_helper_get_type (void);
#define T_TEST_TYPE_JAVA_TEST_HELPER (t_test_java_test_helper_get_type())
#define T_TEST_JAVA_TEST_HELPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_JAVA_TEST_HELPER, TTestJavaTestHelper))
#define T_TEST_JAVA_TEST_HELPER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST__TYPE_JAVA_TEST_HELPER, TTestJavaTestHelperClass))
#define T_TEST_IS_JAVA_TEST_HELPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_JAVA_TEST_HELPER))
#define T_TEST_IS_JAVA_TEST_HELPER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_JAVA_TEST_HELPER))
#define T_TEST_JAVA_TEST_HELPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_JAVA_TEST_HELPER, TTestJavaTestHelperClass))

/* constants */

#endif /* T_TEST_OPTIONAL_REQUIRED_TEST_TYPES_H */
