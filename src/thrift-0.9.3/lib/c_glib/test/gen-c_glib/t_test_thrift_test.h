/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef T_TEST_THRIFT_TEST_H
#define T_TEST_THRIFT_TEST_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "t_test_thrift_test_types.h"

/* ThriftTest service interface */
typedef struct _TTestThriftTestIf TTestThriftTestIf;  /* dummy object */

struct _TTestThriftTestIfInterface
{
  GTypeInterface parent;

  gboolean (*test_void) (TTestThriftTestIf *iface, GError **error);
  gboolean (*test_string) (TTestThriftTestIf *iface, gchar ** _return, const gchar * thing, GError **error);
  gboolean (*test_bool) (TTestThriftTestIf *iface, gboolean* _return, const gboolean thing, GError **error);
  gboolean (*test_byte) (TTestThriftTestIf *iface, gint8* _return, const gint8 thing, GError **error);
  gboolean (*test_i32) (TTestThriftTestIf *iface, gint32* _return, const gint32 thing, GError **error);
  gboolean (*test_i64) (TTestThriftTestIf *iface, gint64* _return, const gint64 thing, GError **error);
  gboolean (*test_double) (TTestThriftTestIf *iface, gdouble* _return, const gdouble thing, GError **error);
  gboolean (*test_binary) (TTestThriftTestIf *iface, GByteArray ** _return, const GByteArray * thing, GError **error);
  gboolean (*test_struct) (TTestThriftTestIf *iface, TTestXtruct ** _return, const TTestXtruct * thing, GError **error);
  gboolean (*test_nest) (TTestThriftTestIf *iface, TTestXtruct2 ** _return, const TTestXtruct2 * thing, GError **error);
  gboolean (*test_map) (TTestThriftTestIf *iface, GHashTable ** _return, const GHashTable * thing, GError **error);
  gboolean (*test_string_map) (TTestThriftTestIf *iface, GHashTable ** _return, const GHashTable * thing, GError **error);
  gboolean (*test_set) (TTestThriftTestIf *iface, GHashTable ** _return, const GHashTable * thing, GError **error);
  gboolean (*test_list) (TTestThriftTestIf *iface, GArray ** _return, const GArray * thing, GError **error);
  gboolean (*test_enum) (TTestThriftTestIf *iface, TTestNumberz* _return, const TTestNumberz thing, GError **error);
  gboolean (*test_typedef) (TTestThriftTestIf *iface, TTestUserId* _return, const TTestUserId thing, GError **error);
  gboolean (*test_map_map) (TTestThriftTestIf *iface, GHashTable ** _return, const gint32 hello, GError **error);
  gboolean (*test_insanity) (TTestThriftTestIf *iface, GHashTable ** _return, const TTestInsanity * argument, GError **error);
  gboolean (*test_multi) (TTestThriftTestIf *iface, TTestXtruct ** _return, const gint8 arg0, const gint32 arg1, const gint64 arg2, const GHashTable * arg3, const TTestNumberz arg4, const TTestUserId arg5, GError **error);
  gboolean (*test_exception) (TTestThriftTestIf *iface, const gchar * arg, TTestXception ** err1, GError **error);
  gboolean (*test_multi_exception) (TTestThriftTestIf *iface, TTestXtruct ** _return, const gchar * arg0, const gchar * arg1, TTestXception ** err1, TTestXception2 ** err2, GError **error);
  gboolean (*test_oneway) (TTestThriftTestIf *iface, const gint32 secondsToSleep, GError **error);
};
typedef struct _TTestThriftTestIfInterface TTestThriftTestIfInterface;

GType t_test_thrift_test_if_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_IF (t_test_thrift_test_if_get_type())
#define T_TEST_THRIFT_TEST_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_IF, TTestThriftTestIf))
#define T_TEST_IS_THRIFT_TEST_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_IF))
#define T_TEST_THRIFT_TEST_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), T_TEST_TYPE_THRIFT_TEST_IF, TTestThriftTestIfInterface))

gboolean t_test_thrift_test_if_test_void (TTestThriftTestIf *iface, GError **error);
gboolean t_test_thrift_test_if_test_string (TTestThriftTestIf *iface, gchar ** _return, const gchar * thing, GError **error);
gboolean t_test_thrift_test_if_test_bool (TTestThriftTestIf *iface, gboolean* _return, const gboolean thing, GError **error);
gboolean t_test_thrift_test_if_test_byte (TTestThriftTestIf *iface, gint8* _return, const gint8 thing, GError **error);
gboolean t_test_thrift_test_if_test_i32 (TTestThriftTestIf *iface, gint32* _return, const gint32 thing, GError **error);
gboolean t_test_thrift_test_if_test_i64 (TTestThriftTestIf *iface, gint64* _return, const gint64 thing, GError **error);
gboolean t_test_thrift_test_if_test_double (TTestThriftTestIf *iface, gdouble* _return, const gdouble thing, GError **error);
gboolean t_test_thrift_test_if_test_binary (TTestThriftTestIf *iface, GByteArray ** _return, const GByteArray * thing, GError **error);
gboolean t_test_thrift_test_if_test_struct (TTestThriftTestIf *iface, TTestXtruct ** _return, const TTestXtruct * thing, GError **error);
gboolean t_test_thrift_test_if_test_nest (TTestThriftTestIf *iface, TTestXtruct2 ** _return, const TTestXtruct2 * thing, GError **error);
gboolean t_test_thrift_test_if_test_map (TTestThriftTestIf *iface, GHashTable ** _return, const GHashTable * thing, GError **error);
gboolean t_test_thrift_test_if_test_string_map (TTestThriftTestIf *iface, GHashTable ** _return, const GHashTable * thing, GError **error);
gboolean t_test_thrift_test_if_test_set (TTestThriftTestIf *iface, GHashTable ** _return, const GHashTable * thing, GError **error);
gboolean t_test_thrift_test_if_test_list (TTestThriftTestIf *iface, GArray ** _return, const GArray * thing, GError **error);
gboolean t_test_thrift_test_if_test_enum (TTestThriftTestIf *iface, TTestNumberz* _return, const TTestNumberz thing, GError **error);
gboolean t_test_thrift_test_if_test_typedef (TTestThriftTestIf *iface, TTestUserId* _return, const TTestUserId thing, GError **error);
gboolean t_test_thrift_test_if_test_map_map (TTestThriftTestIf *iface, GHashTable ** _return, const gint32 hello, GError **error);
gboolean t_test_thrift_test_if_test_insanity (TTestThriftTestIf *iface, GHashTable ** _return, const TTestInsanity * argument, GError **error);
gboolean t_test_thrift_test_if_test_multi (TTestThriftTestIf *iface, TTestXtruct ** _return, const gint8 arg0, const gint32 arg1, const gint64 arg2, const GHashTable * arg3, const TTestNumberz arg4, const TTestUserId arg5, GError **error);
gboolean t_test_thrift_test_if_test_exception (TTestThriftTestIf *iface, const gchar * arg, TTestXception ** err1, GError **error);
gboolean t_test_thrift_test_if_test_multi_exception (TTestThriftTestIf *iface, TTestXtruct ** _return, const gchar * arg0, const gchar * arg1, TTestXception ** err1, TTestXception2 ** err2, GError **error);
gboolean t_test_thrift_test_if_test_oneway (TTestThriftTestIf *iface, const gint32 secondsToSleep, GError **error);

/* ThriftTest service client */
struct _TTestThriftTestClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _TTestThriftTestClient TTestThriftTestClient;

struct _TTestThriftTestClientClass
{
  GObjectClass parent;
};
typedef struct _TTestThriftTestClientClass TTestThriftTestClientClass;

GType t_test_thrift_test_client_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_CLIENT (t_test_thrift_test_client_get_type())
#define T_TEST_THRIFT_TEST_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_CLIENT, TTestThriftTestClient))
#define T_TEST_THRIFT_TEST_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST_TYPE_THRIFT_TEST_CLIENT, TTestThriftTestClientClass))
#define T_TEST_THRIFT_TEST_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_CLIENT))
#define T_TEST_THRIFT_TEST_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_CLIENT))
#define T_TEST_THRIFT_TEST_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_CLIENT, TTestThriftTestClientClass))

gboolean t_test_thrift_test_client_test_void (TTestThriftTestIf * iface, GError ** error);
gboolean t_test_thrift_test_client_send_test_void (TTestThriftTestIf * iface, GError ** error);
gboolean t_test_thrift_test_client_recv_test_void (TTestThriftTestIf * iface, GError ** error);
gboolean t_test_thrift_test_client_test_string (TTestThriftTestIf * iface, gchar ** _return, const gchar * thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_string (TTestThriftTestIf * iface, const gchar * thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_string (TTestThriftTestIf * iface, gchar ** _return, GError ** error);
gboolean t_test_thrift_test_client_test_bool (TTestThriftTestIf * iface, gboolean* _return, const gboolean thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_bool (TTestThriftTestIf * iface, const gboolean thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_bool (TTestThriftTestIf * iface, gboolean* _return, GError ** error);
gboolean t_test_thrift_test_client_test_byte (TTestThriftTestIf * iface, gint8* _return, const gint8 thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_byte (TTestThriftTestIf * iface, const gint8 thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_byte (TTestThriftTestIf * iface, gint8* _return, GError ** error);
gboolean t_test_thrift_test_client_test_i32 (TTestThriftTestIf * iface, gint32* _return, const gint32 thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_i32 (TTestThriftTestIf * iface, const gint32 thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_i32 (TTestThriftTestIf * iface, gint32* _return, GError ** error);
gboolean t_test_thrift_test_client_test_i64 (TTestThriftTestIf * iface, gint64* _return, const gint64 thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_i64 (TTestThriftTestIf * iface, const gint64 thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_i64 (TTestThriftTestIf * iface, gint64* _return, GError ** error);
gboolean t_test_thrift_test_client_test_double (TTestThriftTestIf * iface, gdouble* _return, const gdouble thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_double (TTestThriftTestIf * iface, const gdouble thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_double (TTestThriftTestIf * iface, gdouble* _return, GError ** error);
gboolean t_test_thrift_test_client_test_binary (TTestThriftTestIf * iface, GByteArray ** _return, const GByteArray * thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_binary (TTestThriftTestIf * iface, const GByteArray * thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_binary (TTestThriftTestIf * iface, GByteArray ** _return, GError ** error);
gboolean t_test_thrift_test_client_test_struct (TTestThriftTestIf * iface, TTestXtruct ** _return, const TTestXtruct * thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_struct (TTestThriftTestIf * iface, const TTestXtruct * thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_struct (TTestThriftTestIf * iface, TTestXtruct ** _return, GError ** error);
gboolean t_test_thrift_test_client_test_nest (TTestThriftTestIf * iface, TTestXtruct2 ** _return, const TTestXtruct2 * thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_nest (TTestThriftTestIf * iface, const TTestXtruct2 * thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_nest (TTestThriftTestIf * iface, TTestXtruct2 ** _return, GError ** error);
gboolean t_test_thrift_test_client_test_map (TTestThriftTestIf * iface, GHashTable ** _return, const GHashTable * thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_map (TTestThriftTestIf * iface, const GHashTable * thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_map (TTestThriftTestIf * iface, GHashTable ** _return, GError ** error);
gboolean t_test_thrift_test_client_test_string_map (TTestThriftTestIf * iface, GHashTable ** _return, const GHashTable * thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_string_map (TTestThriftTestIf * iface, const GHashTable * thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_string_map (TTestThriftTestIf * iface, GHashTable ** _return, GError ** error);
gboolean t_test_thrift_test_client_test_set (TTestThriftTestIf * iface, GHashTable ** _return, const GHashTable * thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_set (TTestThriftTestIf * iface, const GHashTable * thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_set (TTestThriftTestIf * iface, GHashTable ** _return, GError ** error);
gboolean t_test_thrift_test_client_test_list (TTestThriftTestIf * iface, GArray ** _return, const GArray * thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_list (TTestThriftTestIf * iface, const GArray * thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_list (TTestThriftTestIf * iface, GArray ** _return, GError ** error);
gboolean t_test_thrift_test_client_test_enum (TTestThriftTestIf * iface, TTestNumberz* _return, const TTestNumberz thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_enum (TTestThriftTestIf * iface, const TTestNumberz thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_enum (TTestThriftTestIf * iface, TTestNumberz* _return, GError ** error);
gboolean t_test_thrift_test_client_test_typedef (TTestThriftTestIf * iface, TTestUserId* _return, const TTestUserId thing, GError ** error);
gboolean t_test_thrift_test_client_send_test_typedef (TTestThriftTestIf * iface, const TTestUserId thing, GError ** error);
gboolean t_test_thrift_test_client_recv_test_typedef (TTestThriftTestIf * iface, TTestUserId* _return, GError ** error);
gboolean t_test_thrift_test_client_test_map_map (TTestThriftTestIf * iface, GHashTable ** _return, const gint32 hello, GError ** error);
gboolean t_test_thrift_test_client_send_test_map_map (TTestThriftTestIf * iface, const gint32 hello, GError ** error);
gboolean t_test_thrift_test_client_recv_test_map_map (TTestThriftTestIf * iface, GHashTable ** _return, GError ** error);
gboolean t_test_thrift_test_client_test_insanity (TTestThriftTestIf * iface, GHashTable ** _return, const TTestInsanity * argument, GError ** error);
gboolean t_test_thrift_test_client_send_test_insanity (TTestThriftTestIf * iface, const TTestInsanity * argument, GError ** error);
gboolean t_test_thrift_test_client_recv_test_insanity (TTestThriftTestIf * iface, GHashTable ** _return, GError ** error);
gboolean t_test_thrift_test_client_test_multi (TTestThriftTestIf * iface, TTestXtruct ** _return, const gint8 arg0, const gint32 arg1, const gint64 arg2, const GHashTable * arg3, const TTestNumberz arg4, const TTestUserId arg5, GError ** error);
gboolean t_test_thrift_test_client_send_test_multi (TTestThriftTestIf * iface, const gint8 arg0, const gint32 arg1, const gint64 arg2, const GHashTable * arg3, const TTestNumberz arg4, const TTestUserId arg5, GError ** error);
gboolean t_test_thrift_test_client_recv_test_multi (TTestThriftTestIf * iface, TTestXtruct ** _return, GError ** error);
gboolean t_test_thrift_test_client_test_exception (TTestThriftTestIf * iface, const gchar * arg, TTestXception ** err1, GError ** error);
gboolean t_test_thrift_test_client_send_test_exception (TTestThriftTestIf * iface, const gchar * arg, GError ** error);
gboolean t_test_thrift_test_client_recv_test_exception (TTestThriftTestIf * iface, TTestXception ** err1, GError ** error);
gboolean t_test_thrift_test_client_test_multi_exception (TTestThriftTestIf * iface, TTestXtruct ** _return, const gchar * arg0, const gchar * arg1, TTestXception ** err1, TTestXception2 ** err2, GError ** error);
gboolean t_test_thrift_test_client_send_test_multi_exception (TTestThriftTestIf * iface, const gchar * arg0, const gchar * arg1, GError ** error);
gboolean t_test_thrift_test_client_recv_test_multi_exception (TTestThriftTestIf * iface, TTestXtruct ** _return, TTestXception ** err1, TTestXception2 ** err2, GError ** error);
gboolean t_test_thrift_test_client_test_oneway (TTestThriftTestIf * iface, const gint32 secondsToSleep, GError ** error);
gboolean t_test_thrift_test_client_send_test_oneway (TTestThriftTestIf * iface, const gint32 secondsToSleep, GError ** error);
void thrift_test_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void thrift_test_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* ThriftTest handler (abstract base class) */
struct _TTestThriftTestHandler
{
  GObject parent;
};
typedef struct _TTestThriftTestHandler TTestThriftTestHandler;

struct _TTestThriftTestHandlerClass
{
  GObjectClass parent;

  gboolean (*test_void) (TTestThriftTestIf *iface, GError **error);
  gboolean (*test_string) (TTestThriftTestIf *iface, gchar ** _return, const gchar * thing, GError **error);
  gboolean (*test_bool) (TTestThriftTestIf *iface, gboolean* _return, const gboolean thing, GError **error);
  gboolean (*test_byte) (TTestThriftTestIf *iface, gint8* _return, const gint8 thing, GError **error);
  gboolean (*test_i32) (TTestThriftTestIf *iface, gint32* _return, const gint32 thing, GError **error);
  gboolean (*test_i64) (TTestThriftTestIf *iface, gint64* _return, const gint64 thing, GError **error);
  gboolean (*test_double) (TTestThriftTestIf *iface, gdouble* _return, const gdouble thing, GError **error);
  gboolean (*test_binary) (TTestThriftTestIf *iface, GByteArray ** _return, const GByteArray * thing, GError **error);
  gboolean (*test_struct) (TTestThriftTestIf *iface, TTestXtruct ** _return, const TTestXtruct * thing, GError **error);
  gboolean (*test_nest) (TTestThriftTestIf *iface, TTestXtruct2 ** _return, const TTestXtruct2 * thing, GError **error);
  gboolean (*test_map) (TTestThriftTestIf *iface, GHashTable ** _return, const GHashTable * thing, GError **error);
  gboolean (*test_string_map) (TTestThriftTestIf *iface, GHashTable ** _return, const GHashTable * thing, GError **error);
  gboolean (*test_set) (TTestThriftTestIf *iface, GHashTable ** _return, const GHashTable * thing, GError **error);
  gboolean (*test_list) (TTestThriftTestIf *iface, GArray ** _return, const GArray * thing, GError **error);
  gboolean (*test_enum) (TTestThriftTestIf *iface, TTestNumberz* _return, const TTestNumberz thing, GError **error);
  gboolean (*test_typedef) (TTestThriftTestIf *iface, TTestUserId* _return, const TTestUserId thing, GError **error);
  gboolean (*test_map_map) (TTestThriftTestIf *iface, GHashTable ** _return, const gint32 hello, GError **error);
  gboolean (*test_insanity) (TTestThriftTestIf *iface, GHashTable ** _return, const TTestInsanity * argument, GError **error);
  gboolean (*test_multi) (TTestThriftTestIf *iface, TTestXtruct ** _return, const gint8 arg0, const gint32 arg1, const gint64 arg2, const GHashTable * arg3, const TTestNumberz arg4, const TTestUserId arg5, GError **error);
  gboolean (*test_exception) (TTestThriftTestIf *iface, const gchar * arg, TTestXception ** err1, GError **error);
  gboolean (*test_multi_exception) (TTestThriftTestIf *iface, TTestXtruct ** _return, const gchar * arg0, const gchar * arg1, TTestXception ** err1, TTestXception2 ** err2, GError **error);
  gboolean (*test_oneway) (TTestThriftTestIf *iface, const gint32 secondsToSleep, GError **error);
};
typedef struct _TTestThriftTestHandlerClass TTestThriftTestHandlerClass;

GType t_test_thrift_test_handler_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_HANDLER (t_test_thrift_test_handler_get_type())
#define T_TEST_THRIFT_TEST_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_HANDLER, TTestThriftTestHandler))
#define T_TEST_IS_THRIFT_TEST_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_HANDLER))
#define T_TEST_THRIFT_TEST_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST_TYPE_THRIFT_TEST_HANDLER, TTestThriftTestHandlerClass))
#define T_TEST_IS_THRIFT_TEST_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_HANDLER))
#define T_TEST_THRIFT_TEST_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_HANDLER, TTestThriftTestHandlerClass))

gboolean t_test_thrift_test_handler_test_void (TTestThriftTestIf *iface, GError **error);
gboolean t_test_thrift_test_handler_test_string (TTestThriftTestIf *iface, gchar ** _return, const gchar * thing, GError **error);
gboolean t_test_thrift_test_handler_test_bool (TTestThriftTestIf *iface, gboolean* _return, const gboolean thing, GError **error);
gboolean t_test_thrift_test_handler_test_byte (TTestThriftTestIf *iface, gint8* _return, const gint8 thing, GError **error);
gboolean t_test_thrift_test_handler_test_i32 (TTestThriftTestIf *iface, gint32* _return, const gint32 thing, GError **error);
gboolean t_test_thrift_test_handler_test_i64 (TTestThriftTestIf *iface, gint64* _return, const gint64 thing, GError **error);
gboolean t_test_thrift_test_handler_test_double (TTestThriftTestIf *iface, gdouble* _return, const gdouble thing, GError **error);
gboolean t_test_thrift_test_handler_test_binary (TTestThriftTestIf *iface, GByteArray ** _return, const GByteArray * thing, GError **error);
gboolean t_test_thrift_test_handler_test_struct (TTestThriftTestIf *iface, TTestXtruct ** _return, const TTestXtruct * thing, GError **error);
gboolean t_test_thrift_test_handler_test_nest (TTestThriftTestIf *iface, TTestXtruct2 ** _return, const TTestXtruct2 * thing, GError **error);
gboolean t_test_thrift_test_handler_test_map (TTestThriftTestIf *iface, GHashTable ** _return, const GHashTable * thing, GError **error);
gboolean t_test_thrift_test_handler_test_string_map (TTestThriftTestIf *iface, GHashTable ** _return, const GHashTable * thing, GError **error);
gboolean t_test_thrift_test_handler_test_set (TTestThriftTestIf *iface, GHashTable ** _return, const GHashTable * thing, GError **error);
gboolean t_test_thrift_test_handler_test_list (TTestThriftTestIf *iface, GArray ** _return, const GArray * thing, GError **error);
gboolean t_test_thrift_test_handler_test_enum (TTestThriftTestIf *iface, TTestNumberz* _return, const TTestNumberz thing, GError **error);
gboolean t_test_thrift_test_handler_test_typedef (TTestThriftTestIf *iface, TTestUserId* _return, const TTestUserId thing, GError **error);
gboolean t_test_thrift_test_handler_test_map_map (TTestThriftTestIf *iface, GHashTable ** _return, const gint32 hello, GError **error);
gboolean t_test_thrift_test_handler_test_insanity (TTestThriftTestIf *iface, GHashTable ** _return, const TTestInsanity * argument, GError **error);
gboolean t_test_thrift_test_handler_test_multi (TTestThriftTestIf *iface, TTestXtruct ** _return, const gint8 arg0, const gint32 arg1, const gint64 arg2, const GHashTable * arg3, const TTestNumberz arg4, const TTestUserId arg5, GError **error);
gboolean t_test_thrift_test_handler_test_exception (TTestThriftTestIf *iface, const gchar * arg, TTestXception ** err1, GError **error);
gboolean t_test_thrift_test_handler_test_multi_exception (TTestThriftTestIf *iface, TTestXtruct ** _return, const gchar * arg0, const gchar * arg1, TTestXception ** err1, TTestXception2 ** err2, GError **error);
gboolean t_test_thrift_test_handler_test_oneway (TTestThriftTestIf *iface, const gint32 secondsToSleep, GError **error);

/* ThriftTest processor */
struct _TTestThriftTestProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  TTestThriftTestHandler *handler;
  GHashTable *process_map;
};
typedef struct _TTestThriftTestProcessor TTestThriftTestProcessor;

struct _TTestThriftTestProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _TTestThriftTestProcessorClass TTestThriftTestProcessorClass;

GType t_test_thrift_test_processor_get_type (void);
#define T_TEST_TYPE_THRIFT_TEST_PROCESSOR (t_test_thrift_test_processor_get_type())
#define T_TEST_THRIFT_TEST_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), T_TEST_TYPE_THRIFT_TEST_PROCESSOR, TTestThriftTestProcessor))
#define T_TEST_IS_THRIFT_TEST_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), T_TEST_TYPE_THRIFT_TEST_PROCESSOR))
#define T_TEST_THRIFT_TEST_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), T_TEST_TYPE_THRIFT_TEST_PROCESSOR, TTestThriftTestProcessorClass))
#define T_TEST_IS_THRIFT_TEST_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), T_TEST_TYPE_THRIFT_TEST_PROCESSOR))
#define T_TEST_THRIFT_TEST_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), T_TEST_TYPE_THRIFT_TEST_PROCESSOR, TTestThriftTestProcessorClass))

#endif /* T_TEST_THRIFT_TEST_H */
